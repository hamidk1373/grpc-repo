// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: allprotos/taskManager.proto

package taskmanagerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskManagerServiceClient is the client API for TaskManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskManagerServiceClient interface {
	ScheduleOhlcvs(ctx context.Context, in *ScheduleOhlcvsRequest, opts ...grpc.CallOption) (*ScheduleOhlcvsResponse, error)
	UnscheduleOhlcvs(ctx context.Context, in *UnscheduleOhlcvsRequest, opts ...grpc.CallOption) (*UnscheduleOhlcvsResponse, error)
}

type taskManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerServiceClient(cc grpc.ClientConnInterface) TaskManagerServiceClient {
	return &taskManagerServiceClient{cc}
}

func (c *taskManagerServiceClient) ScheduleOhlcvs(ctx context.Context, in *ScheduleOhlcvsRequest, opts ...grpc.CallOption) (*ScheduleOhlcvsResponse, error) {
	out := new(ScheduleOhlcvsResponse)
	err := c.cc.Invoke(ctx, "/taskmanager.TaskManagerService/ScheduleOhlcvs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerServiceClient) UnscheduleOhlcvs(ctx context.Context, in *UnscheduleOhlcvsRequest, opts ...grpc.CallOption) (*UnscheduleOhlcvsResponse, error) {
	out := new(UnscheduleOhlcvsResponse)
	err := c.cc.Invoke(ctx, "/taskmanager.TaskManagerService/UnscheduleOhlcvs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServiceServer is the server API for TaskManagerService service.
// All implementations must embed UnimplementedTaskManagerServiceServer
// for forward compatibility
type TaskManagerServiceServer interface {
	ScheduleOhlcvs(context.Context, *ScheduleOhlcvsRequest) (*ScheduleOhlcvsResponse, error)
	UnscheduleOhlcvs(context.Context, *UnscheduleOhlcvsRequest) (*UnscheduleOhlcvsResponse, error)
	mustEmbedUnimplementedTaskManagerServiceServer()
}

// UnimplementedTaskManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServiceServer struct {
}

func (UnimplementedTaskManagerServiceServer) ScheduleOhlcvs(context.Context, *ScheduleOhlcvsRequest) (*ScheduleOhlcvsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleOhlcvs not implemented")
}
func (UnimplementedTaskManagerServiceServer) UnscheduleOhlcvs(context.Context, *UnscheduleOhlcvsRequest) (*UnscheduleOhlcvsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnscheduleOhlcvs not implemented")
}
func (UnimplementedTaskManagerServiceServer) mustEmbedUnimplementedTaskManagerServiceServer() {}

// UnsafeTaskManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskManagerServiceServer will
// result in compilation errors.
type UnsafeTaskManagerServiceServer interface {
	mustEmbedUnimplementedTaskManagerServiceServer()
}

func RegisterTaskManagerServiceServer(s grpc.ServiceRegistrar, srv TaskManagerServiceServer) {
	s.RegisterService(&TaskManagerService_ServiceDesc, srv)
}

func _TaskManagerService_ScheduleOhlcvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleOhlcvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServiceServer).ScheduleOhlcvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskmanager.TaskManagerService/ScheduleOhlcvs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServiceServer).ScheduleOhlcvs(ctx, req.(*ScheduleOhlcvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManagerService_UnscheduleOhlcvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnscheduleOhlcvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServiceServer).UnscheduleOhlcvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taskmanager.TaskManagerService/UnscheduleOhlcvs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServiceServer).UnscheduleOhlcvs(ctx, req.(*UnscheduleOhlcvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskManagerService_ServiceDesc is the grpc.ServiceDesc for TaskManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taskmanager.TaskManagerService",
	HandlerType: (*TaskManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleOhlcvs",
			Handler:    _TaskManagerService_ScheduleOhlcvs_Handler,
		},
		{
			MethodName: "UnscheduleOhlcvs",
			Handler:    _TaskManagerService_UnscheduleOhlcvs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allprotos/taskManager.proto",
}
