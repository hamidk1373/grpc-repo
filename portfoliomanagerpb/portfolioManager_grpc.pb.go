// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: allprotos/portfolioManager.proto

package portfoliomanagerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PortfolioService_CreatePortfolio_FullMethodName               = "/portfoliomanager.PortfolioService/CreatePortfolio"
	PortfolioService_DeletePortfolio_FullMethodName               = "/portfoliomanager.PortfolioService/DeletePortfolio"
	PortfolioService_Portfolios_FullMethodName                    = "/portfoliomanager.PortfolioService/Portfolios"
	PortfolioService_Portfolio_FullMethodName                     = "/portfoliomanager.PortfolioService/Portfolio"
	PortfolioService_DeactivatePortfolio_FullMethodName           = "/portfoliomanager.PortfolioService/DeactivatePortfolio"
	PortfolioService_PausePortfolio_FullMethodName                = "/portfoliomanager.PortfolioService/PausePortfolio"
	PortfolioService_UnpausePortfolio_FullMethodName              = "/portfoliomanager.PortfolioService/UnpausePortfolio"
	PortfolioService_CancelSubscription_FullMethodName            = "/portfoliomanager.PortfolioService/CancelSubscription"
	PortfolioService_UpdatePortfolioThreshold_FullMethodName      = "/portfoliomanager.PortfolioService/UpdatePortfolioThreshold"
	PortfolioService_UpdateAssignedAmount_FullMethodName          = "/portfoliomanager.PortfolioService/UpdateAssignedAmount"
	PortfolioService_AssignedAmountInCurrency_FullMethodName      = "/portfoliomanager.PortfolioService/AssignedAmountInCurrency"
	PortfolioService_UpdatePortfolioExpirationDate_FullMethodName = "/portfoliomanager.PortfolioService/UpdatePortfolioExpirationDate"
)

// PortfolioServiceClient is the client API for PortfolioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfolioServiceClient interface {
	CreatePortfolio(ctx context.Context, in *CreatePortfolioRequest, opts ...grpc.CallOption) (*CreatePortfolioResponse, error)
	DeletePortfolio(ctx context.Context, in *DeletePortfolioRequest, opts ...grpc.CallOption) (*DeletePortfolioResponse, error)
	Portfolios(ctx context.Context, in *PortfoliosRequest, opts ...grpc.CallOption) (*PortfoliosResponse, error)
	Portfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioResponse, error)
	DeactivatePortfolio(ctx context.Context, in *DeactivatePortfolioRequest, opts ...grpc.CallOption) (*DeactivatePortfolioResponse, error)
	PausePortfolio(ctx context.Context, in *PausePortfolioRequest, opts ...grpc.CallOption) (*PausePortfolioResponse, error)
	UnpausePortfolio(ctx context.Context, in *UnpausePortfolioRequest, opts ...grpc.CallOption) (*UnpausePortfolioResponse, error)
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error)
	UpdatePortfolioThreshold(ctx context.Context, in *UpdatePortfolioThresholdRequest, opts ...grpc.CallOption) (*UpdatePortfolioThresholdResponse, error)
	UpdateAssignedAmount(ctx context.Context, in *UpdateAssignedAmountRequest, opts ...grpc.CallOption) (*UpdateAssignedAmountResponse, error)
	AssignedAmountInCurrency(ctx context.Context, in *AssignedAmountInCurrencyRequest, opts ...grpc.CallOption) (*AssignedAmountInCurrencyResponse, error)
	UpdatePortfolioExpirationDate(ctx context.Context, in *UpdatePortfolioExpirationDateRequest, opts ...grpc.CallOption) (*UpdatePortfolioExpirationDateResponse, error)
}

type portfolioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfolioServiceClient(cc grpc.ClientConnInterface) PortfolioServiceClient {
	return &portfolioServiceClient{cc}
}

func (c *portfolioServiceClient) CreatePortfolio(ctx context.Context, in *CreatePortfolioRequest, opts ...grpc.CallOption) (*CreatePortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortfolioResponse)
	err := c.cc.Invoke(ctx, PortfolioService_CreatePortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) DeletePortfolio(ctx context.Context, in *DeletePortfolioRequest, opts ...grpc.CallOption) (*DeletePortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePortfolioResponse)
	err := c.cc.Invoke(ctx, PortfolioService_DeletePortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) Portfolios(ctx context.Context, in *PortfoliosRequest, opts ...grpc.CallOption) (*PortfoliosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortfoliosResponse)
	err := c.cc.Invoke(ctx, PortfolioService_Portfolios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) Portfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortfolioResponse)
	err := c.cc.Invoke(ctx, PortfolioService_Portfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) DeactivatePortfolio(ctx context.Context, in *DeactivatePortfolioRequest, opts ...grpc.CallOption) (*DeactivatePortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivatePortfolioResponse)
	err := c.cc.Invoke(ctx, PortfolioService_DeactivatePortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) PausePortfolio(ctx context.Context, in *PausePortfolioRequest, opts ...grpc.CallOption) (*PausePortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PausePortfolioResponse)
	err := c.cc.Invoke(ctx, PortfolioService_PausePortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UnpausePortfolio(ctx context.Context, in *UnpausePortfolioRequest, opts ...grpc.CallOption) (*UnpausePortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpausePortfolioResponse)
	err := c.cc.Invoke(ctx, PortfolioService_UnpausePortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*CancelSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelSubscriptionResponse)
	err := c.cc.Invoke(ctx, PortfolioService_CancelSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UpdatePortfolioThreshold(ctx context.Context, in *UpdatePortfolioThresholdRequest, opts ...grpc.CallOption) (*UpdatePortfolioThresholdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePortfolioThresholdResponse)
	err := c.cc.Invoke(ctx, PortfolioService_UpdatePortfolioThreshold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UpdateAssignedAmount(ctx context.Context, in *UpdateAssignedAmountRequest, opts ...grpc.CallOption) (*UpdateAssignedAmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAssignedAmountResponse)
	err := c.cc.Invoke(ctx, PortfolioService_UpdateAssignedAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) AssignedAmountInCurrency(ctx context.Context, in *AssignedAmountInCurrencyRequest, opts ...grpc.CallOption) (*AssignedAmountInCurrencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignedAmountInCurrencyResponse)
	err := c.cc.Invoke(ctx, PortfolioService_AssignedAmountInCurrency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portfolioServiceClient) UpdatePortfolioExpirationDate(ctx context.Context, in *UpdatePortfolioExpirationDateRequest, opts ...grpc.CallOption) (*UpdatePortfolioExpirationDateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePortfolioExpirationDateResponse)
	err := c.cc.Invoke(ctx, PortfolioService_UpdatePortfolioExpirationDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfolioServiceServer is the server API for PortfolioService service.
// All implementations must embed UnimplementedPortfolioServiceServer
// for forward compatibility.
type PortfolioServiceServer interface {
	CreatePortfolio(context.Context, *CreatePortfolioRequest) (*CreatePortfolioResponse, error)
	DeletePortfolio(context.Context, *DeletePortfolioRequest) (*DeletePortfolioResponse, error)
	Portfolios(context.Context, *PortfoliosRequest) (*PortfoliosResponse, error)
	Portfolio(context.Context, *PortfolioRequest) (*PortfolioResponse, error)
	DeactivatePortfolio(context.Context, *DeactivatePortfolioRequest) (*DeactivatePortfolioResponse, error)
	PausePortfolio(context.Context, *PausePortfolioRequest) (*PausePortfolioResponse, error)
	UnpausePortfolio(context.Context, *UnpausePortfolioRequest) (*UnpausePortfolioResponse, error)
	CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error)
	UpdatePortfolioThreshold(context.Context, *UpdatePortfolioThresholdRequest) (*UpdatePortfolioThresholdResponse, error)
	UpdateAssignedAmount(context.Context, *UpdateAssignedAmountRequest) (*UpdateAssignedAmountResponse, error)
	AssignedAmountInCurrency(context.Context, *AssignedAmountInCurrencyRequest) (*AssignedAmountInCurrencyResponse, error)
	UpdatePortfolioExpirationDate(context.Context, *UpdatePortfolioExpirationDateRequest) (*UpdatePortfolioExpirationDateResponse, error)
	mustEmbedUnimplementedPortfolioServiceServer()
}

// UnimplementedPortfolioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortfolioServiceServer struct{}

func (UnimplementedPortfolioServiceServer) CreatePortfolio(context.Context, *CreatePortfolioRequest) (*CreatePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) DeletePortfolio(context.Context, *DeletePortfolioRequest) (*DeletePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) Portfolios(context.Context, *PortfoliosRequest) (*PortfoliosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portfolios not implemented")
}
func (UnimplementedPortfolioServiceServer) Portfolio(context.Context, *PortfolioRequest) (*PortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) DeactivatePortfolio(context.Context, *DeactivatePortfolioRequest) (*DeactivatePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivatePortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) PausePortfolio(context.Context, *PausePortfolioRequest) (*PausePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PausePortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) UnpausePortfolio(context.Context, *UnpausePortfolioRequest) (*UnpausePortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpausePortfolio not implemented")
}
func (UnimplementedPortfolioServiceServer) CancelSubscription(context.Context, *CancelSubscriptionRequest) (*CancelSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedPortfolioServiceServer) UpdatePortfolioThreshold(context.Context, *UpdatePortfolioThresholdRequest) (*UpdatePortfolioThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolioThreshold not implemented")
}
func (UnimplementedPortfolioServiceServer) UpdateAssignedAmount(context.Context, *UpdateAssignedAmountRequest) (*UpdateAssignedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignedAmount not implemented")
}
func (UnimplementedPortfolioServiceServer) AssignedAmountInCurrency(context.Context, *AssignedAmountInCurrencyRequest) (*AssignedAmountInCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignedAmountInCurrency not implemented")
}
func (UnimplementedPortfolioServiceServer) UpdatePortfolioExpirationDate(context.Context, *UpdatePortfolioExpirationDateRequest) (*UpdatePortfolioExpirationDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolioExpirationDate not implemented")
}
func (UnimplementedPortfolioServiceServer) mustEmbedUnimplementedPortfolioServiceServer() {}
func (UnimplementedPortfolioServiceServer) testEmbeddedByValue()                          {}

// UnsafePortfolioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfolioServiceServer will
// result in compilation errors.
type UnsafePortfolioServiceServer interface {
	mustEmbedUnimplementedPortfolioServiceServer()
}

func RegisterPortfolioServiceServer(s grpc.ServiceRegistrar, srv PortfolioServiceServer) {
	// If the following call pancis, it indicates UnimplementedPortfolioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PortfolioService_ServiceDesc, srv)
}

func _PortfolioService_CreatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).CreatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_CreatePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).CreatePortfolio(ctx, req.(*CreatePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_DeletePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).DeletePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_DeletePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).DeletePortfolio(ctx, req.(*DeletePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_Portfolios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfoliosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).Portfolios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_Portfolios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).Portfolios(ctx, req.(*PortfoliosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_Portfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).Portfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_Portfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).Portfolio(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_DeactivatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivatePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).DeactivatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_DeactivatePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).DeactivatePortfolio(ctx, req.(*DeactivatePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_PausePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PausePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).PausePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_PausePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).PausePortfolio(ctx, req.(*PausePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UnpausePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpausePortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UnpausePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_UnpausePortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UnpausePortfolio(ctx, req.(*UnpausePortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).CancelSubscription(ctx, req.(*CancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UpdatePortfolioThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortfolioThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UpdatePortfolioThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_UpdatePortfolioThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UpdatePortfolioThreshold(ctx, req.(*UpdatePortfolioThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UpdateAssignedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UpdateAssignedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_UpdateAssignedAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UpdateAssignedAmount(ctx, req.(*UpdateAssignedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_AssignedAmountInCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignedAmountInCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).AssignedAmountInCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_AssignedAmountInCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).AssignedAmountInCurrency(ctx, req.(*AssignedAmountInCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortfolioService_UpdatePortfolioExpirationDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortfolioExpirationDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfolioServiceServer).UpdatePortfolioExpirationDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortfolioService_UpdatePortfolioExpirationDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfolioServiceServer).UpdatePortfolioExpirationDate(ctx, req.(*UpdatePortfolioExpirationDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortfolioService_ServiceDesc is the grpc.ServiceDesc for PortfolioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortfolioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "portfoliomanager.PortfolioService",
	HandlerType: (*PortfolioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePortfolio",
			Handler:    _PortfolioService_CreatePortfolio_Handler,
		},
		{
			MethodName: "DeletePortfolio",
			Handler:    _PortfolioService_DeletePortfolio_Handler,
		},
		{
			MethodName: "Portfolios",
			Handler:    _PortfolioService_Portfolios_Handler,
		},
		{
			MethodName: "Portfolio",
			Handler:    _PortfolioService_Portfolio_Handler,
		},
		{
			MethodName: "DeactivatePortfolio",
			Handler:    _PortfolioService_DeactivatePortfolio_Handler,
		},
		{
			MethodName: "PausePortfolio",
			Handler:    _PortfolioService_PausePortfolio_Handler,
		},
		{
			MethodName: "UnpausePortfolio",
			Handler:    _PortfolioService_UnpausePortfolio_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _PortfolioService_CancelSubscription_Handler,
		},
		{
			MethodName: "UpdatePortfolioThreshold",
			Handler:    _PortfolioService_UpdatePortfolioThreshold_Handler,
		},
		{
			MethodName: "UpdateAssignedAmount",
			Handler:    _PortfolioService_UpdateAssignedAmount_Handler,
		},
		{
			MethodName: "AssignedAmountInCurrency",
			Handler:    _PortfolioService_AssignedAmountInCurrency_Handler,
		},
		{
			MethodName: "UpdatePortfolioExpirationDate",
			Handler:    _PortfolioService_UpdatePortfolioExpirationDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allprotos/portfolioManager.proto",
}
