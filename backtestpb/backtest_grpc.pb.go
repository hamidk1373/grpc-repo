// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: allprotos/backtest.proto

package backtestpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BacktestService_CreateExperimentGroup_FullMethodName = "/backtest.BacktestService/CreateExperimentGroup"
	BacktestService_CreateExperiment_FullMethodName      = "/backtest.BacktestService/CreateExperiment"
	BacktestService_Experiment_FullMethodName            = "/backtest.BacktestService/Experiment"
	BacktestService_ExperimentInfo_FullMethodName        = "/backtest.BacktestService/ExperimentInfo"
	BacktestService_Experiments_FullMethodName           = "/backtest.BacktestService/Experiments"
	BacktestService_StrategyIndicators_FullMethodName    = "/backtest.BacktestService/StrategyIndicators"
)

// BacktestServiceClient is the client API for BacktestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BacktestServiceClient interface {
	CreateExperimentGroup(ctx context.Context, in *CreateExperimentGroupRequest, opts ...grpc.CallOption) (*CreateExperimentGroupResponse, error)
	CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentResponse, error)
	Experiment(ctx context.Context, in *ExperimentRequest, opts ...grpc.CallOption) (*ExperimentResponse, error)
	ExperimentInfo(ctx context.Context, in *ExperimentInfoRequest, opts ...grpc.CallOption) (*ExperimentInfoResponse, error)
	Experiments(ctx context.Context, in *ExperimentsRequest, opts ...grpc.CallOption) (*ExperimentsResponse, error)
	StrategyIndicators(ctx context.Context, in *StrategyIndicatorsRequest, opts ...grpc.CallOption) (*StrategyIndicatorsResponse, error)
}

type backtestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBacktestServiceClient(cc grpc.ClientConnInterface) BacktestServiceClient {
	return &backtestServiceClient{cc}
}

func (c *backtestServiceClient) CreateExperimentGroup(ctx context.Context, in *CreateExperimentGroupRequest, opts ...grpc.CallOption) (*CreateExperimentGroupResponse, error) {
	out := new(CreateExperimentGroupResponse)
	err := c.cc.Invoke(ctx, BacktestService_CreateExperimentGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServiceClient) CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentResponse, error) {
	out := new(CreateExperimentResponse)
	err := c.cc.Invoke(ctx, BacktestService_CreateExperiment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServiceClient) Experiment(ctx context.Context, in *ExperimentRequest, opts ...grpc.CallOption) (*ExperimentResponse, error) {
	out := new(ExperimentResponse)
	err := c.cc.Invoke(ctx, BacktestService_Experiment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServiceClient) ExperimentInfo(ctx context.Context, in *ExperimentInfoRequest, opts ...grpc.CallOption) (*ExperimentInfoResponse, error) {
	out := new(ExperimentInfoResponse)
	err := c.cc.Invoke(ctx, BacktestService_ExperimentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServiceClient) Experiments(ctx context.Context, in *ExperimentsRequest, opts ...grpc.CallOption) (*ExperimentsResponse, error) {
	out := new(ExperimentsResponse)
	err := c.cc.Invoke(ctx, BacktestService_Experiments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backtestServiceClient) StrategyIndicators(ctx context.Context, in *StrategyIndicatorsRequest, opts ...grpc.CallOption) (*StrategyIndicatorsResponse, error) {
	out := new(StrategyIndicatorsResponse)
	err := c.cc.Invoke(ctx, BacktestService_StrategyIndicators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BacktestServiceServer is the server API for BacktestService service.
// All implementations must embed UnimplementedBacktestServiceServer
// for forward compatibility
type BacktestServiceServer interface {
	CreateExperimentGroup(context.Context, *CreateExperimentGroupRequest) (*CreateExperimentGroupResponse, error)
	CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentResponse, error)
	Experiment(context.Context, *ExperimentRequest) (*ExperimentResponse, error)
	ExperimentInfo(context.Context, *ExperimentInfoRequest) (*ExperimentInfoResponse, error)
	Experiments(context.Context, *ExperimentsRequest) (*ExperimentsResponse, error)
	StrategyIndicators(context.Context, *StrategyIndicatorsRequest) (*StrategyIndicatorsResponse, error)
	mustEmbedUnimplementedBacktestServiceServer()
}

// UnimplementedBacktestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBacktestServiceServer struct {
}

func (UnimplementedBacktestServiceServer) CreateExperimentGroup(context.Context, *CreateExperimentGroupRequest) (*CreateExperimentGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentGroup not implemented")
}
func (UnimplementedBacktestServiceServer) CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (UnimplementedBacktestServiceServer) Experiment(context.Context, *ExperimentRequest) (*ExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Experiment not implemented")
}
func (UnimplementedBacktestServiceServer) ExperimentInfo(context.Context, *ExperimentInfoRequest) (*ExperimentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExperimentInfo not implemented")
}
func (UnimplementedBacktestServiceServer) Experiments(context.Context, *ExperimentsRequest) (*ExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Experiments not implemented")
}
func (UnimplementedBacktestServiceServer) StrategyIndicators(context.Context, *StrategyIndicatorsRequest) (*StrategyIndicatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StrategyIndicators not implemented")
}
func (UnimplementedBacktestServiceServer) mustEmbedUnimplementedBacktestServiceServer() {}

// UnsafeBacktestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BacktestServiceServer will
// result in compilation errors.
type UnsafeBacktestServiceServer interface {
	mustEmbedUnimplementedBacktestServiceServer()
}

func RegisterBacktestServiceServer(s grpc.ServiceRegistrar, srv BacktestServiceServer) {
	s.RegisterService(&BacktestService_ServiceDesc, srv)
}

func _BacktestService_CreateExperimentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServiceServer).CreateExperimentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestService_CreateExperimentGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServiceServer).CreateExperimentGroup(ctx, req.(*CreateExperimentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestService_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServiceServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestService_CreateExperiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServiceServer).CreateExperiment(ctx, req.(*CreateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestService_Experiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServiceServer).Experiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestService_Experiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServiceServer).Experiment(ctx, req.(*ExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestService_ExperimentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServiceServer).ExperimentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestService_ExperimentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServiceServer).ExperimentInfo(ctx, req.(*ExperimentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestService_Experiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServiceServer).Experiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestService_Experiments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServiceServer).Experiments(ctx, req.(*ExperimentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BacktestService_StrategyIndicators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrategyIndicatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BacktestServiceServer).StrategyIndicators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BacktestService_StrategyIndicators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BacktestServiceServer).StrategyIndicators(ctx, req.(*StrategyIndicatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BacktestService_ServiceDesc is the grpc.ServiceDesc for BacktestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BacktestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backtest.BacktestService",
	HandlerType: (*BacktestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExperimentGroup",
			Handler:    _BacktestService_CreateExperimentGroup_Handler,
		},
		{
			MethodName: "CreateExperiment",
			Handler:    _BacktestService_CreateExperiment_Handler,
		},
		{
			MethodName: "Experiment",
			Handler:    _BacktestService_Experiment_Handler,
		},
		{
			MethodName: "ExperimentInfo",
			Handler:    _BacktestService_ExperimentInfo_Handler,
		},
		{
			MethodName: "Experiments",
			Handler:    _BacktestService_Experiments_Handler,
		},
		{
			MethodName: "StrategyIndicators",
			Handler:    _BacktestService_StrategyIndicators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allprotos/backtest.proto",
}
