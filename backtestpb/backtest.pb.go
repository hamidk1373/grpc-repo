// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.12.4
// source: allprotos/backtest.proto

package backtestpb

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	commonpb "gitlab.com/shanpanze/grpc-repo/commonpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExperimentStatus int32

const (
	ExperimentStatus_UNKNOWN_EXPERIMENT_STATUS ExperimentStatus = 0
	ExperimentStatus_PENDING                   ExperimentStatus = 1
	ExperimentStatus_SUCCEED                   ExperimentStatus = 2
	ExperimentStatus_FAILED                    ExperimentStatus = 3
)

// Enum value maps for ExperimentStatus.
var (
	ExperimentStatus_name = map[int32]string{
		0: "UNKNOWN_EXPERIMENT_STATUS",
		1: "PENDING",
		2: "SUCCEED",
		3: "FAILED",
	}
	ExperimentStatus_value = map[string]int32{
		"UNKNOWN_EXPERIMENT_STATUS": 0,
		"PENDING":                   1,
		"SUCCEED":                   2,
		"FAILED":                    3,
	}
)

func (x ExperimentStatus) Enum() *ExperimentStatus {
	p := new(ExperimentStatus)
	*p = x
	return p
}

func (x ExperimentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExperimentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_allprotos_backtest_proto_enumTypes[0].Descriptor()
}

func (ExperimentStatus) Type() protoreflect.EnumType {
	return &file_allprotos_backtest_proto_enumTypes[0]
}

func (x ExperimentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExperimentStatus.Descriptor instead.
func (ExperimentStatus) EnumDescriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{0}
}

type CreateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs              []string                    `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	Interval           commonpb.Interval           `protobuf:"varint,2,opt,name=interval,proto3,enum=common.Interval" json:"interval,omitempty"`
	Strategy           commonpb.Strategy           `protobuf:"varint,3,opt,name=strategy,proto3,enum=common.Strategy" json:"strategy,omitempty"`
	FromDate           *timestamp.Timestamp        `protobuf:"bytes,4,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate             *timestamp.Timestamp        `protobuf:"bytes,5,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Bucket             uint32                      `protobuf:"varint,6,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Step               uint32                      `protobuf:"varint,7,opt,name=step,proto3" json:"step,omitempty"`
	BuyFee             float64                     `protobuf:"fixed64,8,opt,name=buy_fee,json=buyFee,proto3" json:"buy_fee,omitempty"`
	SellFee            float64                     `protobuf:"fixed64,9,opt,name=sell_fee,json=sellFee,proto3" json:"sell_fee,omitempty"`
	Amount             float64                     `protobuf:"fixed64,10,opt,name=amount,proto3" json:"amount,omitempty"`
	PortfolioMaxNumber int32                       `protobuf:"varint,11,opt,name=portfolio_max_number,json=portfolioMaxNumber,proto3" json:"portfolio_max_number,omitempty"`
	IndicatorConfigs   []*commonpb.IndicatorConfig `protobuf:"bytes,12,rep,name=indicator_configs,json=indicatorConfigs,proto3" json:"indicator_configs,omitempty"`
	StrategyRiskFactor uint32                      `protobuf:"varint,13,opt,name=strategy_risk_factor,json=strategyRiskFactor,proto3" json:"strategy_risk_factor,omitempty"`
	BaseCurrency       string                      `protobuf:"bytes,14,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
}

func (x *CreateExperimentRequest) Reset() {
	*x = CreateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentRequest) ProtoMessage() {}

func (x *CreateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentRequest.ProtoReflect.Descriptor instead.
func (*CreateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{0}
}

func (x *CreateExperimentRequest) GetPairs() []string {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *CreateExperimentRequest) GetInterval() commonpb.Interval {
	if x != nil {
		return x.Interval
	}
	return commonpb.Interval(0)
}

func (x *CreateExperimentRequest) GetStrategy() commonpb.Strategy {
	if x != nil {
		return x.Strategy
	}
	return commonpb.Strategy(0)
}

func (x *CreateExperimentRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *CreateExperimentRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *CreateExperimentRequest) GetBucket() uint32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *CreateExperimentRequest) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *CreateExperimentRequest) GetBuyFee() float64 {
	if x != nil {
		return x.BuyFee
	}
	return 0
}

func (x *CreateExperimentRequest) GetSellFee() float64 {
	if x != nil {
		return x.SellFee
	}
	return 0
}

func (x *CreateExperimentRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateExperimentRequest) GetPortfolioMaxNumber() int32 {
	if x != nil {
		return x.PortfolioMaxNumber
	}
	return 0
}

func (x *CreateExperimentRequest) GetIndicatorConfigs() []*commonpb.IndicatorConfig {
	if x != nil {
		return x.IndicatorConfigs
	}
	return nil
}

func (x *CreateExperimentRequest) GetStrategyRiskFactor() uint32 {
	if x != nil {
		return x.StrategyRiskFactor
	}
	return 0
}

func (x *CreateExperimentRequest) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

type IndicatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ConfigNames []string `protobuf:"bytes,2,rep,name=config_names,json=configNames,proto3" json:"config_names,omitempty"`
}

func (x *IndicatorInfo) Reset() {
	*x = IndicatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicatorInfo) ProtoMessage() {}

func (x *IndicatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicatorInfo.ProtoReflect.Descriptor instead.
func (*IndicatorInfo) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{1}
}

func (x *IndicatorInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndicatorInfo) GetConfigNames() []string {
	if x != nil {
		return x.ConfigNames
	}
	return nil
}

type CreateExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message      string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ExperimentId uint32 `protobuf:"varint,2,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (x *CreateExperimentResponse) Reset() {
	*x = CreateExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentResponse) ProtoMessage() {}

func (x *CreateExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentResponse.ProtoReflect.Descriptor instead.
func (*CreateExperimentResponse) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{2}
}

func (x *CreateExperimentResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateExperimentResponse) GetExperimentId() uint32 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

type ExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId uint32 `protobuf:"varint,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (x *ExperimentRequest) Reset() {
	*x = ExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentRequest) ProtoMessage() {}

func (x *ExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentRequest.ProtoReflect.Descriptor instead.
func (*ExperimentRequest) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{3}
}

func (x *ExperimentRequest) GetExperimentId() uint32 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

type ExperimentInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId uint32 `protobuf:"varint,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (x *ExperimentInfoRequest) Reset() {
	*x = ExperimentInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentInfoRequest) ProtoMessage() {}

func (x *ExperimentInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentInfoRequest.ProtoReflect.Descriptor instead.
func (*ExperimentInfoRequest) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{4}
}

func (x *ExperimentInfoRequest) GetExperimentId() uint32 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair           string               `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	OpenDate       *timestamp.Timestamp `protobuf:"bytes,2,opt,name=open_date,json=openDate,proto3" json:"open_date,omitempty"`
	CloseDate      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=close_date,json=closeDate,proto3" json:"close_date,omitempty"`
	OpenFeeAmount  float64              `protobuf:"fixed64,4,opt,name=open_fee_amount,json=openFeeAmount,proto3" json:"open_fee_amount,omitempty"`
	CloseFeeAmount float64              `protobuf:"fixed64,5,opt,name=close_fee_amount,json=closeFeeAmount,proto3" json:"close_fee_amount,omitempty"`
	OpenPrice      float64              `protobuf:"fixed64,6,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	ClosePrice     float64              `protobuf:"fixed64,7,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	Amount_1       float64              `protobuf:"fixed64,8,opt,name=amount_1,json=amount1,proto3" json:"amount_1,omitempty"`
	Amount_2       float64              `protobuf:"fixed64,9,opt,name=amount_2,json=amount2,proto3" json:"amount_2,omitempty"`
	PNL            float64              `protobuf:"fixed64,10,opt,name=p_n_l,json=pNL,proto3" json:"p_n_l,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{5}
}

func (x *Position) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *Position) GetOpenDate() *timestamp.Timestamp {
	if x != nil {
		return x.OpenDate
	}
	return nil
}

func (x *Position) GetCloseDate() *timestamp.Timestamp {
	if x != nil {
		return x.CloseDate
	}
	return nil
}

func (x *Position) GetOpenFeeAmount() float64 {
	if x != nil {
		return x.OpenFeeAmount
	}
	return 0
}

func (x *Position) GetCloseFeeAmount() float64 {
	if x != nil {
		return x.CloseFeeAmount
	}
	return 0
}

func (x *Position) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *Position) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *Position) GetAmount_1() float64 {
	if x != nil {
		return x.Amount_1
	}
	return 0
}

func (x *Position) GetAmount_2() float64 {
	if x != nil {
		return x.Amount_2
	}
	return 0
}

func (x *Position) GetPNL() float64 {
	if x != nil {
		return x.PNL
	}
	return 0
}

type Backtest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDate  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate    *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Positions []*Position          `protobuf:"bytes,3,rep,name=positions,proto3" json:"positions,omitempty"`
	PNL       float64              `protobuf:"fixed64,4,opt,name=p_n_l,json=pNL,proto3" json:"p_n_l,omitempty"`
	WinRate   float64              `protobuf:"fixed64,5,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`
}

func (x *Backtest) Reset() {
	*x = Backtest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backtest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backtest) ProtoMessage() {}

func (x *Backtest) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backtest.ProtoReflect.Descriptor instead.
func (*Backtest) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{6}
}

func (x *Backtest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *Backtest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *Backtest) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *Backtest) GetPNL() float64 {
	if x != nil {
		return x.PNL
	}
	return 0
}

func (x *Backtest) GetWinRate() float64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

type ExperimentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *ExperimentResponse) Reset() {
	*x = ExperimentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentResponse) ProtoMessage() {}

func (x *ExperimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentResponse.ProtoReflect.Descriptor instead.
func (*ExperimentResponse) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{7}
}

func (x *ExperimentResponse) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type Experiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   uint32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pairs                []string             `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
	Interval             string               `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	FromDate             *timestamp.Timestamp `protobuf:"bytes,4,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate               *timestamp.Timestamp `protobuf:"bytes,5,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Bucket               int32                `protobuf:"varint,6,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Step                 int32                `protobuf:"varint,7,opt,name=step,proto3" json:"step,omitempty"`
	BuyFee               float64              `protobuf:"fixed64,8,opt,name=buy_fee,json=buyFee,proto3" json:"buy_fee,omitempty"`
	SellFee              float64              `protobuf:"fixed64,9,opt,name=sell_fee,json=sellFee,proto3" json:"sell_fee,omitempty"`
	Amount               float64              `protobuf:"fixed64,10,opt,name=amount,proto3" json:"amount,omitempty"`
	PortfolioMaxNumber   int32                `protobuf:"varint,11,opt,name=portfolio_max_number,json=portfolioMaxNumber,proto3" json:"portfolio_max_number,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExecDuration         *duration.Duration   `protobuf:"bytes,13,opt,name=exec_duration,json=execDuration,proto3" json:"exec_duration,omitempty"`
	Backtests            []*Backtest          `protobuf:"bytes,14,rep,name=backtests,proto3" json:"backtests,omitempty"`
	PNL                  float64              `protobuf:"fixed64,16,opt,name=p_n_l,json=pNL,proto3" json:"p_n_l,omitempty"`
	Strategy             string               `protobuf:"bytes,17,opt,name=strategy,proto3" json:"strategy,omitempty"`
	IndicatorConfigs     []string             `protobuf:"bytes,18,rep,name=indicator_configs,json=indicatorConfigs,proto3" json:"indicator_configs,omitempty"`
	Status               ExperimentStatus     `protobuf:"varint,19,opt,name=status,proto3,enum=backtest.ExperimentStatus" json:"status,omitempty"`
	WinRate              float64              `protobuf:"fixed64,20,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`
	BaseCurrency         string               `protobuf:"bytes,21,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
	MeanCdf              float64              `protobuf:"fixed64,22,opt,name=mean_cdf,json=meanCdf,proto3" json:"mean_cdf,omitempty"`
	PnlMin               float64              `protobuf:"fixed64,23,opt,name=pnl_min,json=pnlMin,proto3" json:"pnl_min,omitempty"`
	PnlMax               float64              `protobuf:"fixed64,24,opt,name=pnl_max,json=pnlMax,proto3" json:"pnl_max,omitempty"`
	PnlVariance          float64              `protobuf:"fixed64,25,opt,name=pnl_variance,json=pnlVariance,proto3" json:"pnl_variance,omitempty"`
	PnlStandardDeviation float64              `protobuf:"fixed64,26,opt,name=pnl_standard_deviation,json=pnlStandardDeviation,proto3" json:"pnl_standard_deviation,omitempty"`
}

func (x *Experiment) Reset() {
	*x = Experiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experiment) ProtoMessage() {}

func (x *Experiment) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experiment.ProtoReflect.Descriptor instead.
func (*Experiment) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{8}
}

func (x *Experiment) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Experiment) GetPairs() []string {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *Experiment) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *Experiment) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *Experiment) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *Experiment) GetBucket() int32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *Experiment) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Experiment) GetBuyFee() float64 {
	if x != nil {
		return x.BuyFee
	}
	return 0
}

func (x *Experiment) GetSellFee() float64 {
	if x != nil {
		return x.SellFee
	}
	return 0
}

func (x *Experiment) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Experiment) GetPortfolioMaxNumber() int32 {
	if x != nil {
		return x.PortfolioMaxNumber
	}
	return 0
}

func (x *Experiment) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Experiment) GetExecDuration() *duration.Duration {
	if x != nil {
		return x.ExecDuration
	}
	return nil
}

func (x *Experiment) GetBacktests() []*Backtest {
	if x != nil {
		return x.Backtests
	}
	return nil
}

func (x *Experiment) GetPNL() float64 {
	if x != nil {
		return x.PNL
	}
	return 0
}

func (x *Experiment) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *Experiment) GetIndicatorConfigs() []string {
	if x != nil {
		return x.IndicatorConfigs
	}
	return nil
}

func (x *Experiment) GetStatus() ExperimentStatus {
	if x != nil {
		return x.Status
	}
	return ExperimentStatus_UNKNOWN_EXPERIMENT_STATUS
}

func (x *Experiment) GetWinRate() float64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *Experiment) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *Experiment) GetMeanCdf() float64 {
	if x != nil {
		return x.MeanCdf
	}
	return 0
}

func (x *Experiment) GetPnlMin() float64 {
	if x != nil {
		return x.PnlMin
	}
	return 0
}

func (x *Experiment) GetPnlMax() float64 {
	if x != nil {
		return x.PnlMax
	}
	return 0
}

func (x *Experiment) GetPnlVariance() float64 {
	if x != nil {
		return x.PnlVariance
	}
	return 0
}

func (x *Experiment) GetPnlStandardDeviation() float64 {
	if x != nil {
		return x.PnlStandardDeviation
	}
	return 0
}

type ExperimentInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *ExperimentInfo `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *ExperimentInfoResponse) Reset() {
	*x = ExperimentInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentInfoResponse) ProtoMessage() {}

func (x *ExperimentInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentInfoResponse.ProtoReflect.Descriptor instead.
func (*ExperimentInfoResponse) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{9}
}

func (x *ExperimentInfoResponse) GetExperiment() *ExperimentInfo {
	if x != nil {
		return x.Experiment
	}
	return nil
}

type ExperimentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint32                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FromDate           *timestamp.Timestamp        `protobuf:"bytes,2,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate             *timestamp.Timestamp        `protobuf:"bytes,3,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Interval           string                      `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
	Strategy           string                      `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Pairs              []string                    `protobuf:"bytes,6,rep,name=pairs,proto3" json:"pairs,omitempty"`
	Bucket             int32                       `protobuf:"varint,7,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Step               int32                       `protobuf:"varint,8,opt,name=step,proto3" json:"step,omitempty"`
	BuyFee             float64                     `protobuf:"fixed64,9,opt,name=buy_fee,json=buyFee,proto3" json:"buy_fee,omitempty"`
	SellFee            float64                     `protobuf:"fixed64,10,opt,name=sell_fee,json=sellFee,proto3" json:"sell_fee,omitempty"`
	Amount             float64                     `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	PortfolioMaxNumber int32                       `protobuf:"varint,12,opt,name=portfolio_max_number,json=portfolioMaxNumber,proto3" json:"portfolio_max_number,omitempty"`
	IndicatorConfigs   []*commonpb.IndicatorConfig `protobuf:"bytes,13,rep,name=indicator_configs,json=indicatorConfigs,proto3" json:"indicator_configs,omitempty"`
	BaseCurrency       string                      `protobuf:"bytes,14,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
}

func (x *ExperimentInfo) Reset() {
	*x = ExperimentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentInfo) ProtoMessage() {}

func (x *ExperimentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentInfo.ProtoReflect.Descriptor instead.
func (*ExperimentInfo) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{10}
}

func (x *ExperimentInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExperimentInfo) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *ExperimentInfo) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *ExperimentInfo) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *ExperimentInfo) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *ExperimentInfo) GetPairs() []string {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *ExperimentInfo) GetBucket() int32 {
	if x != nil {
		return x.Bucket
	}
	return 0
}

func (x *ExperimentInfo) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *ExperimentInfo) GetBuyFee() float64 {
	if x != nil {
		return x.BuyFee
	}
	return 0
}

func (x *ExperimentInfo) GetSellFee() float64 {
	if x != nil {
		return x.SellFee
	}
	return 0
}

func (x *ExperimentInfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ExperimentInfo) GetPortfolioMaxNumber() int32 {
	if x != nil {
		return x.PortfolioMaxNumber
	}
	return 0
}

func (x *ExperimentInfo) GetIndicatorConfigs() []*commonpb.IndicatorConfig {
	if x != nil {
		return x.IndicatorConfigs
	}
	return nil
}

func (x *ExperimentInfo) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

type ExperimentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ExperimentsRequest) Reset() {
	*x = ExperimentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentsRequest) ProtoMessage() {}

func (x *ExperimentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentsRequest.ProtoReflect.Descriptor instead.
func (*ExperimentsRequest) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{11}
}

func (x *ExperimentsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ExperimentsRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total  uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{12}
}

func (x *Meta) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Meta) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Meta) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ExperimentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiments []*Experiment `protobuf:"bytes,1,rep,name=experiments,proto3" json:"experiments,omitempty"`
	Meta        *Meta         `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *ExperimentsResponse) Reset() {
	*x = ExperimentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentsResponse) ProtoMessage() {}

func (x *ExperimentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentsResponse.ProtoReflect.Descriptor instead.
func (*ExperimentsResponse) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{13}
}

func (x *ExperimentsResponse) GetExperiments() []*Experiment {
	if x != nil {
		return x.Experiments
	}
	return nil
}

func (x *ExperimentsResponse) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type StrategyIndicatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy commonpb.Strategy `protobuf:"varint,1,opt,name=strategy,proto3,enum=common.Strategy" json:"strategy,omitempty"`
}

func (x *StrategyIndicatorsRequest) Reset() {
	*x = StrategyIndicatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyIndicatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyIndicatorsRequest) ProtoMessage() {}

func (x *StrategyIndicatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyIndicatorsRequest.ProtoReflect.Descriptor instead.
func (*StrategyIndicatorsRequest) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{14}
}

func (x *StrategyIndicatorsRequest) GetStrategy() commonpb.Strategy {
	if x != nil {
		return x.Strategy
	}
	return commonpb.Strategy(0)
}

type StrategyIndicatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndicatorInfos []*IndicatorInfo `protobuf:"bytes,1,rep,name=indicator_infos,json=indicatorInfos,proto3" json:"indicator_infos,omitempty"`
}

func (x *StrategyIndicatorsResponse) Reset() {
	*x = StrategyIndicatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrategyIndicatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrategyIndicatorsResponse) ProtoMessage() {}

func (x *StrategyIndicatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrategyIndicatorsResponse.ProtoReflect.Descriptor instead.
func (*StrategyIndicatorsResponse) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{15}
}

func (x *StrategyIndicatorsResponse) GetIndicatorInfos() []*IndicatorInfo {
	if x != nil {
		return x.IndicatorInfos
	}
	return nil
}

type CreateExperimentGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pairs              []string                    `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	Strategy           commonpb.Strategy           `protobuf:"varint,2,opt,name=strategy,proto3,enum=common.Strategy" json:"strategy,omitempty"`
	FromDate           *timestamp.Timestamp        `protobuf:"bytes,3,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate             *timestamp.Timestamp        `protobuf:"bytes,4,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
	Interval           []commonpb.Interval         `protobuf:"varint,5,rep,packed,name=interval,proto3,enum=common.Interval" json:"interval,omitempty"`
	MinBucket          uint32                      `protobuf:"varint,6,opt,name=min_bucket,json=minBucket,proto3" json:"min_bucket,omitempty"`
	BucketIncrement    uint32                      `protobuf:"varint,7,opt,name=bucket_increment,json=bucketIncrement,proto3" json:"bucket_increment,omitempty"`
	Step               uint32                      `protobuf:"varint,8,opt,name=step,proto3" json:"step,omitempty"`
	BuyFee             float64                     `protobuf:"fixed64,9,opt,name=buy_fee,json=buyFee,proto3" json:"buy_fee,omitempty"`
	SellFee            float64                     `protobuf:"fixed64,10,opt,name=sell_fee,json=sellFee,proto3" json:"sell_fee,omitempty"`
	Amount             float64                     `protobuf:"fixed64,11,opt,name=amount,proto3" json:"amount,omitempty"`
	PortfolioMaxNumber int32                       `protobuf:"varint,12,opt,name=portfolio_max_number,json=portfolioMaxNumber,proto3" json:"portfolio_max_number,omitempty"`
	IndicatorConfigs   []*commonpb.IndicatorConfig `protobuf:"bytes,13,rep,name=indicator_configs,json=indicatorConfigs,proto3" json:"indicator_configs,omitempty"`
	BaseCurrency       string                      `protobuf:"bytes,14,opt,name=base_currency,json=baseCurrency,proto3" json:"base_currency,omitempty"`
}

func (x *CreateExperimentGroupRequest) Reset() {
	*x = CreateExperimentGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentGroupRequest) ProtoMessage() {}

func (x *CreateExperimentGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateExperimentGroupRequest) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{16}
}

func (x *CreateExperimentGroupRequest) GetPairs() []string {
	if x != nil {
		return x.Pairs
	}
	return nil
}

func (x *CreateExperimentGroupRequest) GetStrategy() commonpb.Strategy {
	if x != nil {
		return x.Strategy
	}
	return commonpb.Strategy(0)
}

func (x *CreateExperimentGroupRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *CreateExperimentGroupRequest) GetToDate() *timestamp.Timestamp {
	if x != nil {
		return x.ToDate
	}
	return nil
}

func (x *CreateExperimentGroupRequest) GetInterval() []commonpb.Interval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *CreateExperimentGroupRequest) GetMinBucket() uint32 {
	if x != nil {
		return x.MinBucket
	}
	return 0
}

func (x *CreateExperimentGroupRequest) GetBucketIncrement() uint32 {
	if x != nil {
		return x.BucketIncrement
	}
	return 0
}

func (x *CreateExperimentGroupRequest) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *CreateExperimentGroupRequest) GetBuyFee() float64 {
	if x != nil {
		return x.BuyFee
	}
	return 0
}

func (x *CreateExperimentGroupRequest) GetSellFee() float64 {
	if x != nil {
		return x.SellFee
	}
	return 0
}

func (x *CreateExperimentGroupRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateExperimentGroupRequest) GetPortfolioMaxNumber() int32 {
	if x != nil {
		return x.PortfolioMaxNumber
	}
	return 0
}

func (x *CreateExperimentGroupRequest) GetIndicatorConfigs() []*commonpb.IndicatorConfig {
	if x != nil {
		return x.IndicatorConfigs
	}
	return nil
}

func (x *CreateExperimentGroupRequest) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

type CreateExperimentGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message           string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	ExperimentGroupId uint32 `protobuf:"varint,2,opt,name=experiment_group_id,json=experimentGroupId,proto3" json:"experiment_group_id,omitempty"`
}

func (x *CreateExperimentGroupResponse) Reset() {
	*x = CreateExperimentGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_allprotos_backtest_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentGroupResponse) ProtoMessage() {}

func (x *CreateExperimentGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_allprotos_backtest_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateExperimentGroupResponse) Descriptor() ([]byte, []int) {
	return file_allprotos_backtest_proto_rawDescGZIP(), []int{17}
}

func (x *CreateExperimentGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateExperimentGroupResponse) GetExperimentGroupId() uint32 {
	if x != nil {
		return x.ExperimentGroupId
	}
	return 0
}

var File_allprotos_backtest_proto protoreflect.FileDescriptor

var file_allprotos_backtest_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x04,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x69,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2c, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x75, 0x79, 0x46, 0x65, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0x46, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a,
	0x15, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x37, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x46,
	0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x31, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x12, 0x0a, 0x05, 0x70, 0x5f, 0x6e, 0x5f,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x4e, 0x4c, 0x22, 0xd9, 0x01, 0x0a,
	0x08, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x05, 0x70, 0x5f, 0x6e,
	0x5f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x4e, 0x4c, 0x12, 0x19, 0x0a,
	0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x07, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x62, 0x75, 0x79, 0x46, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c,
	0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x09, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x05, 0x70, 0x5f,
	0x6e, 0x5f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x4e, 0x4c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x77,
	0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x77,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x65, 0x61, 0x6e, 0x5f, 0x63, 0x64, 0x66, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d,
	0x65, 0x61, 0x6e, 0x43, 0x64, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6e, 0x6c, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x6e, 0x6c, 0x4d, 0x69, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6e, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x70, 0x6e, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6e, 0x6c, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x70, 0x6e, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x6e, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x6e, 0x6c,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x52, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x62, 0x75, 0x79, 0x46, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x6c,
	0x6c, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x11, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x42, 0x0a, 0x12, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4a, 0x0a,
	0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x71, 0x0a, 0x13, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x19,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x5e, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xc5, 0x04, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x37, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x75, 0x79, 0x46, 0x65, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x4d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x69, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x2a, 0x57, 0x0a, 0x10, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x32, 0xa1, 0x04, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x26, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_allprotos_backtest_proto_rawDescOnce sync.Once
	file_allprotos_backtest_proto_rawDescData = file_allprotos_backtest_proto_rawDesc
)

func file_allprotos_backtest_proto_rawDescGZIP() []byte {
	file_allprotos_backtest_proto_rawDescOnce.Do(func() {
		file_allprotos_backtest_proto_rawDescData = protoimpl.X.CompressGZIP(file_allprotos_backtest_proto_rawDescData)
	})
	return file_allprotos_backtest_proto_rawDescData
}

var file_allprotos_backtest_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_allprotos_backtest_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_allprotos_backtest_proto_goTypes = []interface{}{
	(ExperimentStatus)(0),                 // 0: backtest.ExperimentStatus
	(*CreateExperimentRequest)(nil),       // 1: backtest.CreateExperimentRequest
	(*IndicatorInfo)(nil),                 // 2: backtest.IndicatorInfo
	(*CreateExperimentResponse)(nil),      // 3: backtest.CreateExperimentResponse
	(*ExperimentRequest)(nil),             // 4: backtest.ExperimentRequest
	(*ExperimentInfoRequest)(nil),         // 5: backtest.ExperimentInfoRequest
	(*Position)(nil),                      // 6: backtest.Position
	(*Backtest)(nil),                      // 7: backtest.Backtest
	(*ExperimentResponse)(nil),            // 8: backtest.ExperimentResponse
	(*Experiment)(nil),                    // 9: backtest.Experiment
	(*ExperimentInfoResponse)(nil),        // 10: backtest.ExperimentInfoResponse
	(*ExperimentInfo)(nil),                // 11: backtest.ExperimentInfo
	(*ExperimentsRequest)(nil),            // 12: backtest.ExperimentsRequest
	(*Meta)(nil),                          // 13: backtest.Meta
	(*ExperimentsResponse)(nil),           // 14: backtest.ExperimentsResponse
	(*StrategyIndicatorsRequest)(nil),     // 15: backtest.StrategyIndicatorsRequest
	(*StrategyIndicatorsResponse)(nil),    // 16: backtest.StrategyIndicatorsResponse
	(*CreateExperimentGroupRequest)(nil),  // 17: backtest.CreateExperimentGroupRequest
	(*CreateExperimentGroupResponse)(nil), // 18: backtest.CreateExperimentGroupResponse
	(commonpb.Interval)(0),                // 19: common.Interval
	(commonpb.Strategy)(0),                // 20: common.Strategy
	(*timestamp.Timestamp)(nil),           // 21: google.protobuf.Timestamp
	(*commonpb.IndicatorConfig)(nil),      // 22: common.IndicatorConfig
	(*duration.Duration)(nil),             // 23: google.protobuf.Duration
}
var file_allprotos_backtest_proto_depIdxs = []int32{
	19, // 0: backtest.CreateExperimentRequest.interval:type_name -> common.Interval
	20, // 1: backtest.CreateExperimentRequest.strategy:type_name -> common.Strategy
	21, // 2: backtest.CreateExperimentRequest.from_date:type_name -> google.protobuf.Timestamp
	21, // 3: backtest.CreateExperimentRequest.to_date:type_name -> google.protobuf.Timestamp
	22, // 4: backtest.CreateExperimentRequest.indicator_configs:type_name -> common.IndicatorConfig
	21, // 5: backtest.Position.open_date:type_name -> google.protobuf.Timestamp
	21, // 6: backtest.Position.close_date:type_name -> google.protobuf.Timestamp
	21, // 7: backtest.Backtest.from_date:type_name -> google.protobuf.Timestamp
	21, // 8: backtest.Backtest.to_date:type_name -> google.protobuf.Timestamp
	6,  // 9: backtest.Backtest.positions:type_name -> backtest.Position
	9,  // 10: backtest.ExperimentResponse.experiment:type_name -> backtest.Experiment
	21, // 11: backtest.Experiment.from_date:type_name -> google.protobuf.Timestamp
	21, // 12: backtest.Experiment.to_date:type_name -> google.protobuf.Timestamp
	21, // 13: backtest.Experiment.created_at:type_name -> google.protobuf.Timestamp
	23, // 14: backtest.Experiment.exec_duration:type_name -> google.protobuf.Duration
	7,  // 15: backtest.Experiment.backtests:type_name -> backtest.Backtest
	0,  // 16: backtest.Experiment.status:type_name -> backtest.ExperimentStatus
	11, // 17: backtest.ExperimentInfoResponse.experiment:type_name -> backtest.ExperimentInfo
	21, // 18: backtest.ExperimentInfo.from_date:type_name -> google.protobuf.Timestamp
	21, // 19: backtest.ExperimentInfo.to_date:type_name -> google.protobuf.Timestamp
	22, // 20: backtest.ExperimentInfo.indicator_configs:type_name -> common.IndicatorConfig
	9,  // 21: backtest.ExperimentsResponse.experiments:type_name -> backtest.Experiment
	13, // 22: backtest.ExperimentsResponse.meta:type_name -> backtest.Meta
	20, // 23: backtest.StrategyIndicatorsRequest.strategy:type_name -> common.Strategy
	2,  // 24: backtest.StrategyIndicatorsResponse.indicator_infos:type_name -> backtest.IndicatorInfo
	20, // 25: backtest.CreateExperimentGroupRequest.strategy:type_name -> common.Strategy
	21, // 26: backtest.CreateExperimentGroupRequest.from_date:type_name -> google.protobuf.Timestamp
	21, // 27: backtest.CreateExperimentGroupRequest.to_date:type_name -> google.protobuf.Timestamp
	19, // 28: backtest.CreateExperimentGroupRequest.interval:type_name -> common.Interval
	22, // 29: backtest.CreateExperimentGroupRequest.indicator_configs:type_name -> common.IndicatorConfig
	17, // 30: backtest.BacktestService.CreateExperimentGroup:input_type -> backtest.CreateExperimentGroupRequest
	1,  // 31: backtest.BacktestService.CreateExperiment:input_type -> backtest.CreateExperimentRequest
	4,  // 32: backtest.BacktestService.Experiment:input_type -> backtest.ExperimentRequest
	5,  // 33: backtest.BacktestService.ExperimentInfo:input_type -> backtest.ExperimentInfoRequest
	12, // 34: backtest.BacktestService.Experiments:input_type -> backtest.ExperimentsRequest
	15, // 35: backtest.BacktestService.StrategyIndicators:input_type -> backtest.StrategyIndicatorsRequest
	18, // 36: backtest.BacktestService.CreateExperimentGroup:output_type -> backtest.CreateExperimentGroupResponse
	3,  // 37: backtest.BacktestService.CreateExperiment:output_type -> backtest.CreateExperimentResponse
	8,  // 38: backtest.BacktestService.Experiment:output_type -> backtest.ExperimentResponse
	10, // 39: backtest.BacktestService.ExperimentInfo:output_type -> backtest.ExperimentInfoResponse
	14, // 40: backtest.BacktestService.Experiments:output_type -> backtest.ExperimentsResponse
	16, // 41: backtest.BacktestService.StrategyIndicators:output_type -> backtest.StrategyIndicatorsResponse
	36, // [36:42] is the sub-list for method output_type
	30, // [30:36] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_allprotos_backtest_proto_init() }
func file_allprotos_backtest_proto_init() {
	if File_allprotos_backtest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_allprotos_backtest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backtest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyIndicatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrategyIndicatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_allprotos_backtest_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_allprotos_backtest_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_allprotos_backtest_proto_goTypes,
		DependencyIndexes: file_allprotos_backtest_proto_depIdxs,
		EnumInfos:         file_allprotos_backtest_proto_enumTypes,
		MessageInfos:      file_allprotos_backtest_proto_msgTypes,
	}.Build()
	File_allprotos_backtest_proto = out.File
	file_allprotos_backtest_proto_rawDesc = nil
	file_allprotos_backtest_proto_goTypes = nil
	file_allprotos_backtest_proto_depIdxs = nil
}
