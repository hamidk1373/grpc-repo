// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: allprotos/signaler.proto

package signalerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignalerService_PublishSignal_FullMethodName                  = "/signaler.SignalerService/PublishSignal"
	SignalerService_InvalidateSignal_FullMethodName               = "/signaler.SignalerService/InvalidateSignal"
	SignalerService_CreateSignaler_FullMethodName                 = "/signaler.SignalerService/CreateSignaler"
	SignalerService_Signalers_FullMethodName                      = "/signaler.SignalerService/Signalers"
	SignalerService_Signaler_FullMethodName                       = "/signaler.SignalerService/Signaler"
	SignalerService_ActivateSignaler_FullMethodName               = "/signaler.SignalerService/ActivateSignaler"
	SignalerService_DeactivateSignaler_FullMethodName             = "/signaler.SignalerService/DeactivateSignaler"
	SignalerService_UpdateSignaler_FullMethodName                 = "/signaler.SignalerService/UpdateSignaler"
	SignalerService_SignalerSignals_FullMethodName                = "/signaler.SignalerService/SignalerSignals"
	SignalerService_CreateTelegramSignalPublisher_FullMethodName  = "/signaler.SignalerService/CreateTelegramSignalPublisher"
	SignalerService_TelegramSignalPublishers_FullMethodName       = "/signaler.SignalerService/TelegramSignalPublishers"
	SignalerService_TelegramSignalPublisher_FullMethodName        = "/signaler.SignalerService/TelegramSignalPublisher"
	SignalerService_UpdateTelegramSignalPublisher_FullMethodName  = "/signaler.SignalerService/UpdateTelegramSignalPublisher"
	SignalerService_DeleteTelegramSignalPublisher_FullMethodName  = "/signaler.SignalerService/DeleteTelegramSignalPublisher"
	SignalerService_UpdateCreatorSignaler_FullMethodName          = "/signaler.SignalerService/UpdateCreatorSignaler"
	SignalerService_PublishSignaler_FullMethodName                = "/signaler.SignalerService/PublishSignaler"
	SignalerService_CheckTelegramAccountStatus_FullMethodName     = "/signaler.SignalerService/CheckTelegramAccountStatus"
	SignalerService_VerifyPhoneNumberForTelegram_FullMethodName   = "/signaler.SignalerService/VerifyPhoneNumberForTelegram"
	SignalerService_VerifyCodeForTelegram_FullMethodName          = "/signaler.SignalerService/VerifyCodeForTelegram"
	SignalerService_VerifySecondaryCodeForTelegram_FullMethodName = "/signaler.SignalerService/VerifySecondaryCodeForTelegram"
	SignalerService_LogoutTelegramAccount_FullMethodName          = "/signaler.SignalerService/LogoutTelegramAccount"
)

// SignalerServiceClient is the client API for SignalerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignalerServiceClient interface {
	PublishSignal(ctx context.Context, in *PublishSignalRequest, opts ...grpc.CallOption) (*PublishSignalResponse, error)
	InvalidateSignal(ctx context.Context, in *InvalidateSignalRequest, opts ...grpc.CallOption) (*InvalidateSignalResponse, error)
	CreateSignaler(ctx context.Context, in *CreateSignalerRequest, opts ...grpc.CallOption) (*CreateSignalerResponse, error)
	Signalers(ctx context.Context, in *SignalersRequest, opts ...grpc.CallOption) (*SignalersResponse, error)
	Signaler(ctx context.Context, in *SignalerRequest, opts ...grpc.CallOption) (*SignalerResponse, error)
	ActivateSignaler(ctx context.Context, in *ActivateSignalerRequest, opts ...grpc.CallOption) (*ActivateSignalerResponse, error)
	DeactivateSignaler(ctx context.Context, in *DeactivateSignalerRequest, opts ...grpc.CallOption) (*DeactivateSignalerResponse, error)
	UpdateSignaler(ctx context.Context, in *UpdateSignalerRequest, opts ...grpc.CallOption) (*UpdateSignalerResponse, error)
	SignalerSignals(ctx context.Context, in *SignalerSignalsRequest, opts ...grpc.CallOption) (*SignalerSignalsResponse, error)
	CreateTelegramSignalPublisher(ctx context.Context, in *CreateTelegramSignalPublisherRequest, opts ...grpc.CallOption) (*CreateTelegramSignalPublisherResponse, error)
	TelegramSignalPublishers(ctx context.Context, in *TelegramSignalPublishersRequest, opts ...grpc.CallOption) (*TelegramSignalPublishersResponse, error)
	TelegramSignalPublisher(ctx context.Context, in *TelegramSignalPublisherRequest, opts ...grpc.CallOption) (*TelegramSignalPublisherResponse, error)
	UpdateTelegramSignalPublisher(ctx context.Context, in *UpdateTelegramSignalPublisherRequest, opts ...grpc.CallOption) (*UpdateTelegramSignalPublisherResponse, error)
	DeleteTelegramSignalPublisher(ctx context.Context, in *DeleteTelegramSignalPublisherRequest, opts ...grpc.CallOption) (*DeleteTelegramSignalPublisherResponse, error)
	UpdateCreatorSignaler(ctx context.Context, in *UpdateCreatorSignalerRequest, opts ...grpc.CallOption) (*UpdateCreatorSignalerResponse, error)
	PublishSignaler(ctx context.Context, in *PublishSignalerRequest, opts ...grpc.CallOption) (*PublishSignalerResponse, error)
	CheckTelegramAccountStatus(ctx context.Context, in *CheckTelegramAccountStatusRequest, opts ...grpc.CallOption) (*CheckTelegramAccountStatusResponse, error)
	VerifyPhoneNumberForTelegram(ctx context.Context, in *VerifyPhoneNumberForTelegramRequest, opts ...grpc.CallOption) (*VerifyPhoneNumberForTelegramResponse, error)
	VerifyCodeForTelegram(ctx context.Context, in *VerifyCodeForTelegramRequest, opts ...grpc.CallOption) (*VerifyCodeForTelegramResponse, error)
	VerifySecondaryCodeForTelegram(ctx context.Context, in *VerifySecondaryCodeForTelegramRequest, opts ...grpc.CallOption) (*VerifySecondaryCodeForTelegramResponse, error)
	LogoutTelegramAccount(ctx context.Context, in *LogoutTelegramAccountRequest, opts ...grpc.CallOption) (*LogoutTelegramAccountResponse, error)
}

type signalerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignalerServiceClient(cc grpc.ClientConnInterface) SignalerServiceClient {
	return &signalerServiceClient{cc}
}

func (c *signalerServiceClient) PublishSignal(ctx context.Context, in *PublishSignalRequest, opts ...grpc.CallOption) (*PublishSignalResponse, error) {
	out := new(PublishSignalResponse)
	err := c.cc.Invoke(ctx, SignalerService_PublishSignal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) InvalidateSignal(ctx context.Context, in *InvalidateSignalRequest, opts ...grpc.CallOption) (*InvalidateSignalResponse, error) {
	out := new(InvalidateSignalResponse)
	err := c.cc.Invoke(ctx, SignalerService_InvalidateSignal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) CreateSignaler(ctx context.Context, in *CreateSignalerRequest, opts ...grpc.CallOption) (*CreateSignalerResponse, error) {
	out := new(CreateSignalerResponse)
	err := c.cc.Invoke(ctx, SignalerService_CreateSignaler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) Signalers(ctx context.Context, in *SignalersRequest, opts ...grpc.CallOption) (*SignalersResponse, error) {
	out := new(SignalersResponse)
	err := c.cc.Invoke(ctx, SignalerService_Signalers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) Signaler(ctx context.Context, in *SignalerRequest, opts ...grpc.CallOption) (*SignalerResponse, error) {
	out := new(SignalerResponse)
	err := c.cc.Invoke(ctx, SignalerService_Signaler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) ActivateSignaler(ctx context.Context, in *ActivateSignalerRequest, opts ...grpc.CallOption) (*ActivateSignalerResponse, error) {
	out := new(ActivateSignalerResponse)
	err := c.cc.Invoke(ctx, SignalerService_ActivateSignaler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) DeactivateSignaler(ctx context.Context, in *DeactivateSignalerRequest, opts ...grpc.CallOption) (*DeactivateSignalerResponse, error) {
	out := new(DeactivateSignalerResponse)
	err := c.cc.Invoke(ctx, SignalerService_DeactivateSignaler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) UpdateSignaler(ctx context.Context, in *UpdateSignalerRequest, opts ...grpc.CallOption) (*UpdateSignalerResponse, error) {
	out := new(UpdateSignalerResponse)
	err := c.cc.Invoke(ctx, SignalerService_UpdateSignaler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) SignalerSignals(ctx context.Context, in *SignalerSignalsRequest, opts ...grpc.CallOption) (*SignalerSignalsResponse, error) {
	out := new(SignalerSignalsResponse)
	err := c.cc.Invoke(ctx, SignalerService_SignalerSignals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) CreateTelegramSignalPublisher(ctx context.Context, in *CreateTelegramSignalPublisherRequest, opts ...grpc.CallOption) (*CreateTelegramSignalPublisherResponse, error) {
	out := new(CreateTelegramSignalPublisherResponse)
	err := c.cc.Invoke(ctx, SignalerService_CreateTelegramSignalPublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) TelegramSignalPublishers(ctx context.Context, in *TelegramSignalPublishersRequest, opts ...grpc.CallOption) (*TelegramSignalPublishersResponse, error) {
	out := new(TelegramSignalPublishersResponse)
	err := c.cc.Invoke(ctx, SignalerService_TelegramSignalPublishers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) TelegramSignalPublisher(ctx context.Context, in *TelegramSignalPublisherRequest, opts ...grpc.CallOption) (*TelegramSignalPublisherResponse, error) {
	out := new(TelegramSignalPublisherResponse)
	err := c.cc.Invoke(ctx, SignalerService_TelegramSignalPublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) UpdateTelegramSignalPublisher(ctx context.Context, in *UpdateTelegramSignalPublisherRequest, opts ...grpc.CallOption) (*UpdateTelegramSignalPublisherResponse, error) {
	out := new(UpdateTelegramSignalPublisherResponse)
	err := c.cc.Invoke(ctx, SignalerService_UpdateTelegramSignalPublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) DeleteTelegramSignalPublisher(ctx context.Context, in *DeleteTelegramSignalPublisherRequest, opts ...grpc.CallOption) (*DeleteTelegramSignalPublisherResponse, error) {
	out := new(DeleteTelegramSignalPublisherResponse)
	err := c.cc.Invoke(ctx, SignalerService_DeleteTelegramSignalPublisher_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) UpdateCreatorSignaler(ctx context.Context, in *UpdateCreatorSignalerRequest, opts ...grpc.CallOption) (*UpdateCreatorSignalerResponse, error) {
	out := new(UpdateCreatorSignalerResponse)
	err := c.cc.Invoke(ctx, SignalerService_UpdateCreatorSignaler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) PublishSignaler(ctx context.Context, in *PublishSignalerRequest, opts ...grpc.CallOption) (*PublishSignalerResponse, error) {
	out := new(PublishSignalerResponse)
	err := c.cc.Invoke(ctx, SignalerService_PublishSignaler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) CheckTelegramAccountStatus(ctx context.Context, in *CheckTelegramAccountStatusRequest, opts ...grpc.CallOption) (*CheckTelegramAccountStatusResponse, error) {
	out := new(CheckTelegramAccountStatusResponse)
	err := c.cc.Invoke(ctx, SignalerService_CheckTelegramAccountStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) VerifyPhoneNumberForTelegram(ctx context.Context, in *VerifyPhoneNumberForTelegramRequest, opts ...grpc.CallOption) (*VerifyPhoneNumberForTelegramResponse, error) {
	out := new(VerifyPhoneNumberForTelegramResponse)
	err := c.cc.Invoke(ctx, SignalerService_VerifyPhoneNumberForTelegram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) VerifyCodeForTelegram(ctx context.Context, in *VerifyCodeForTelegramRequest, opts ...grpc.CallOption) (*VerifyCodeForTelegramResponse, error) {
	out := new(VerifyCodeForTelegramResponse)
	err := c.cc.Invoke(ctx, SignalerService_VerifyCodeForTelegram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) VerifySecondaryCodeForTelegram(ctx context.Context, in *VerifySecondaryCodeForTelegramRequest, opts ...grpc.CallOption) (*VerifySecondaryCodeForTelegramResponse, error) {
	out := new(VerifySecondaryCodeForTelegramResponse)
	err := c.cc.Invoke(ctx, SignalerService_VerifySecondaryCodeForTelegram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signalerServiceClient) LogoutTelegramAccount(ctx context.Context, in *LogoutTelegramAccountRequest, opts ...grpc.CallOption) (*LogoutTelegramAccountResponse, error) {
	out := new(LogoutTelegramAccountResponse)
	err := c.cc.Invoke(ctx, SignalerService_LogoutTelegramAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignalerServiceServer is the server API for SignalerService service.
// All implementations must embed UnimplementedSignalerServiceServer
// for forward compatibility
type SignalerServiceServer interface {
	PublishSignal(context.Context, *PublishSignalRequest) (*PublishSignalResponse, error)
	InvalidateSignal(context.Context, *InvalidateSignalRequest) (*InvalidateSignalResponse, error)
	CreateSignaler(context.Context, *CreateSignalerRequest) (*CreateSignalerResponse, error)
	Signalers(context.Context, *SignalersRequest) (*SignalersResponse, error)
	Signaler(context.Context, *SignalerRequest) (*SignalerResponse, error)
	ActivateSignaler(context.Context, *ActivateSignalerRequest) (*ActivateSignalerResponse, error)
	DeactivateSignaler(context.Context, *DeactivateSignalerRequest) (*DeactivateSignalerResponse, error)
	UpdateSignaler(context.Context, *UpdateSignalerRequest) (*UpdateSignalerResponse, error)
	SignalerSignals(context.Context, *SignalerSignalsRequest) (*SignalerSignalsResponse, error)
	CreateTelegramSignalPublisher(context.Context, *CreateTelegramSignalPublisherRequest) (*CreateTelegramSignalPublisherResponse, error)
	TelegramSignalPublishers(context.Context, *TelegramSignalPublishersRequest) (*TelegramSignalPublishersResponse, error)
	TelegramSignalPublisher(context.Context, *TelegramSignalPublisherRequest) (*TelegramSignalPublisherResponse, error)
	UpdateTelegramSignalPublisher(context.Context, *UpdateTelegramSignalPublisherRequest) (*UpdateTelegramSignalPublisherResponse, error)
	DeleteTelegramSignalPublisher(context.Context, *DeleteTelegramSignalPublisherRequest) (*DeleteTelegramSignalPublisherResponse, error)
	UpdateCreatorSignaler(context.Context, *UpdateCreatorSignalerRequest) (*UpdateCreatorSignalerResponse, error)
	PublishSignaler(context.Context, *PublishSignalerRequest) (*PublishSignalerResponse, error)
	CheckTelegramAccountStatus(context.Context, *CheckTelegramAccountStatusRequest) (*CheckTelegramAccountStatusResponse, error)
	VerifyPhoneNumberForTelegram(context.Context, *VerifyPhoneNumberForTelegramRequest) (*VerifyPhoneNumberForTelegramResponse, error)
	VerifyCodeForTelegram(context.Context, *VerifyCodeForTelegramRequest) (*VerifyCodeForTelegramResponse, error)
	VerifySecondaryCodeForTelegram(context.Context, *VerifySecondaryCodeForTelegramRequest) (*VerifySecondaryCodeForTelegramResponse, error)
	LogoutTelegramAccount(context.Context, *LogoutTelegramAccountRequest) (*LogoutTelegramAccountResponse, error)
	mustEmbedUnimplementedSignalerServiceServer()
}

// UnimplementedSignalerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignalerServiceServer struct {
}

func (UnimplementedSignalerServiceServer) PublishSignal(context.Context, *PublishSignalRequest) (*PublishSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishSignal not implemented")
}
func (UnimplementedSignalerServiceServer) InvalidateSignal(context.Context, *InvalidateSignalRequest) (*InvalidateSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateSignal not implemented")
}
func (UnimplementedSignalerServiceServer) CreateSignaler(context.Context, *CreateSignalerRequest) (*CreateSignalerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSignaler not implemented")
}
func (UnimplementedSignalerServiceServer) Signalers(context.Context, *SignalersRequest) (*SignalersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signalers not implemented")
}
func (UnimplementedSignalerServiceServer) Signaler(context.Context, *SignalerRequest) (*SignalerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signaler not implemented")
}
func (UnimplementedSignalerServiceServer) ActivateSignaler(context.Context, *ActivateSignalerRequest) (*ActivateSignalerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateSignaler not implemented")
}
func (UnimplementedSignalerServiceServer) DeactivateSignaler(context.Context, *DeactivateSignalerRequest) (*DeactivateSignalerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateSignaler not implemented")
}
func (UnimplementedSignalerServiceServer) UpdateSignaler(context.Context, *UpdateSignalerRequest) (*UpdateSignalerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignaler not implemented")
}
func (UnimplementedSignalerServiceServer) SignalerSignals(context.Context, *SignalerSignalsRequest) (*SignalerSignalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalerSignals not implemented")
}
func (UnimplementedSignalerServiceServer) CreateTelegramSignalPublisher(context.Context, *CreateTelegramSignalPublisherRequest) (*CreateTelegramSignalPublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTelegramSignalPublisher not implemented")
}
func (UnimplementedSignalerServiceServer) TelegramSignalPublishers(context.Context, *TelegramSignalPublishersRequest) (*TelegramSignalPublishersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TelegramSignalPublishers not implemented")
}
func (UnimplementedSignalerServiceServer) TelegramSignalPublisher(context.Context, *TelegramSignalPublisherRequest) (*TelegramSignalPublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TelegramSignalPublisher not implemented")
}
func (UnimplementedSignalerServiceServer) UpdateTelegramSignalPublisher(context.Context, *UpdateTelegramSignalPublisherRequest) (*UpdateTelegramSignalPublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelegramSignalPublisher not implemented")
}
func (UnimplementedSignalerServiceServer) DeleteTelegramSignalPublisher(context.Context, *DeleteTelegramSignalPublisherRequest) (*DeleteTelegramSignalPublisherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTelegramSignalPublisher not implemented")
}
func (UnimplementedSignalerServiceServer) UpdateCreatorSignaler(context.Context, *UpdateCreatorSignalerRequest) (*UpdateCreatorSignalerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreatorSignaler not implemented")
}
func (UnimplementedSignalerServiceServer) PublishSignaler(context.Context, *PublishSignalerRequest) (*PublishSignalerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishSignaler not implemented")
}
func (UnimplementedSignalerServiceServer) CheckTelegramAccountStatus(context.Context, *CheckTelegramAccountStatusRequest) (*CheckTelegramAccountStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTelegramAccountStatus not implemented")
}
func (UnimplementedSignalerServiceServer) VerifyPhoneNumberForTelegram(context.Context, *VerifyPhoneNumberForTelegramRequest) (*VerifyPhoneNumberForTelegramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhoneNumberForTelegram not implemented")
}
func (UnimplementedSignalerServiceServer) VerifyCodeForTelegram(context.Context, *VerifyCodeForTelegramRequest) (*VerifyCodeForTelegramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCodeForTelegram not implemented")
}
func (UnimplementedSignalerServiceServer) VerifySecondaryCodeForTelegram(context.Context, *VerifySecondaryCodeForTelegramRequest) (*VerifySecondaryCodeForTelegramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySecondaryCodeForTelegram not implemented")
}
func (UnimplementedSignalerServiceServer) LogoutTelegramAccount(context.Context, *LogoutTelegramAccountRequest) (*LogoutTelegramAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutTelegramAccount not implemented")
}
func (UnimplementedSignalerServiceServer) mustEmbedUnimplementedSignalerServiceServer() {}

// UnsafeSignalerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignalerServiceServer will
// result in compilation errors.
type UnsafeSignalerServiceServer interface {
	mustEmbedUnimplementedSignalerServiceServer()
}

func RegisterSignalerServiceServer(s grpc.ServiceRegistrar, srv SignalerServiceServer) {
	s.RegisterService(&SignalerService_ServiceDesc, srv)
}

func _SignalerService_PublishSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).PublishSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_PublishSignal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).PublishSignal(ctx, req.(*PublishSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_InvalidateSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).InvalidateSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_InvalidateSignal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).InvalidateSignal(ctx, req.(*InvalidateSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_CreateSignaler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSignalerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).CreateSignaler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_CreateSignaler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).CreateSignaler(ctx, req.(*CreateSignalerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_Signalers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).Signalers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_Signalers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).Signalers(ctx, req.(*SignalersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_Signaler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).Signaler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_Signaler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).Signaler(ctx, req.(*SignalerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_ActivateSignaler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateSignalerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).ActivateSignaler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_ActivateSignaler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).ActivateSignaler(ctx, req.(*ActivateSignalerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_DeactivateSignaler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateSignalerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).DeactivateSignaler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_DeactivateSignaler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).DeactivateSignaler(ctx, req.(*DeactivateSignalerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_UpdateSignaler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSignalerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).UpdateSignaler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_UpdateSignaler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).UpdateSignaler(ctx, req.(*UpdateSignalerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_SignalerSignals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalerSignalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).SignalerSignals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_SignalerSignals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).SignalerSignals(ctx, req.(*SignalerSignalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_CreateTelegramSignalPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelegramSignalPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).CreateTelegramSignalPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_CreateTelegramSignalPublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).CreateTelegramSignalPublisher(ctx, req.(*CreateTelegramSignalPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_TelegramSignalPublishers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramSignalPublishersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).TelegramSignalPublishers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_TelegramSignalPublishers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).TelegramSignalPublishers(ctx, req.(*TelegramSignalPublishersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_TelegramSignalPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramSignalPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).TelegramSignalPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_TelegramSignalPublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).TelegramSignalPublisher(ctx, req.(*TelegramSignalPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_UpdateTelegramSignalPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTelegramSignalPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).UpdateTelegramSignalPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_UpdateTelegramSignalPublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).UpdateTelegramSignalPublisher(ctx, req.(*UpdateTelegramSignalPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_DeleteTelegramSignalPublisher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTelegramSignalPublisherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).DeleteTelegramSignalPublisher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_DeleteTelegramSignalPublisher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).DeleteTelegramSignalPublisher(ctx, req.(*DeleteTelegramSignalPublisherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_UpdateCreatorSignaler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreatorSignalerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).UpdateCreatorSignaler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_UpdateCreatorSignaler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).UpdateCreatorSignaler(ctx, req.(*UpdateCreatorSignalerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_PublishSignaler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishSignalerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).PublishSignaler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_PublishSignaler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).PublishSignaler(ctx, req.(*PublishSignalerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_CheckTelegramAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTelegramAccountStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).CheckTelegramAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_CheckTelegramAccountStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).CheckTelegramAccountStatus(ctx, req.(*CheckTelegramAccountStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_VerifyPhoneNumberForTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneNumberForTelegramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).VerifyPhoneNumberForTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_VerifyPhoneNumberForTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).VerifyPhoneNumberForTelegram(ctx, req.(*VerifyPhoneNumberForTelegramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_VerifyCodeForTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeForTelegramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).VerifyCodeForTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_VerifyCodeForTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).VerifyCodeForTelegram(ctx, req.(*VerifyCodeForTelegramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_VerifySecondaryCodeForTelegram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySecondaryCodeForTelegramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).VerifySecondaryCodeForTelegram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_VerifySecondaryCodeForTelegram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).VerifySecondaryCodeForTelegram(ctx, req.(*VerifySecondaryCodeForTelegramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignalerService_LogoutTelegramAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutTelegramAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignalerServiceServer).LogoutTelegramAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignalerService_LogoutTelegramAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignalerServiceServer).LogoutTelegramAccount(ctx, req.(*LogoutTelegramAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignalerService_ServiceDesc is the grpc.ServiceDesc for SignalerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignalerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "signaler.SignalerService",
	HandlerType: (*SignalerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishSignal",
			Handler:    _SignalerService_PublishSignal_Handler,
		},
		{
			MethodName: "InvalidateSignal",
			Handler:    _SignalerService_InvalidateSignal_Handler,
		},
		{
			MethodName: "CreateSignaler",
			Handler:    _SignalerService_CreateSignaler_Handler,
		},
		{
			MethodName: "Signalers",
			Handler:    _SignalerService_Signalers_Handler,
		},
		{
			MethodName: "Signaler",
			Handler:    _SignalerService_Signaler_Handler,
		},
		{
			MethodName: "ActivateSignaler",
			Handler:    _SignalerService_ActivateSignaler_Handler,
		},
		{
			MethodName: "DeactivateSignaler",
			Handler:    _SignalerService_DeactivateSignaler_Handler,
		},
		{
			MethodName: "UpdateSignaler",
			Handler:    _SignalerService_UpdateSignaler_Handler,
		},
		{
			MethodName: "SignalerSignals",
			Handler:    _SignalerService_SignalerSignals_Handler,
		},
		{
			MethodName: "CreateTelegramSignalPublisher",
			Handler:    _SignalerService_CreateTelegramSignalPublisher_Handler,
		},
		{
			MethodName: "TelegramSignalPublishers",
			Handler:    _SignalerService_TelegramSignalPublishers_Handler,
		},
		{
			MethodName: "TelegramSignalPublisher",
			Handler:    _SignalerService_TelegramSignalPublisher_Handler,
		},
		{
			MethodName: "UpdateTelegramSignalPublisher",
			Handler:    _SignalerService_UpdateTelegramSignalPublisher_Handler,
		},
		{
			MethodName: "DeleteTelegramSignalPublisher",
			Handler:    _SignalerService_DeleteTelegramSignalPublisher_Handler,
		},
		{
			MethodName: "UpdateCreatorSignaler",
			Handler:    _SignalerService_UpdateCreatorSignaler_Handler,
		},
		{
			MethodName: "PublishSignaler",
			Handler:    _SignalerService_PublishSignaler_Handler,
		},
		{
			MethodName: "CheckTelegramAccountStatus",
			Handler:    _SignalerService_CheckTelegramAccountStatus_Handler,
		},
		{
			MethodName: "VerifyPhoneNumberForTelegram",
			Handler:    _SignalerService_VerifyPhoneNumberForTelegram_Handler,
		},
		{
			MethodName: "VerifyCodeForTelegram",
			Handler:    _SignalerService_VerifyCodeForTelegram_Handler,
		},
		{
			MethodName: "VerifySecondaryCodeForTelegram",
			Handler:    _SignalerService_VerifySecondaryCodeForTelegram_Handler,
		},
		{
			MethodName: "LogoutTelegramAccount",
			Handler:    _SignalerService_LogoutTelegramAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allprotos/signaler.proto",
}
