// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: allprotos/user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_PrepareAuthenticationWithGoogle_FullMethodName = "/user.UserService/PrepareAuthenticationWithGoogle"
	UserService_VerifyAuthenticationWithGoogle_FullMethodName  = "/user.UserService/VerifyAuthenticationWithGoogle"
	UserService_CheckRequestAccess_FullMethodName              = "/user.UserService/CheckRequestAccess"
	UserService_LogoutUser_FullMethodName                      = "/user.UserService/LogoutUser"
	UserService_Users_FullMethodName                           = "/user.UserService/Users"
	UserService_UpdateUserProfile_FullMethodName               = "/user.UserService/UpdateUserProfile"
	UserService_UserAPIKey_FullMethodName                      = "/user.UserService/UserAPIKey"
	UserService_UserAPIKeys_FullMethodName                     = "/user.UserService/UserAPIKeys"
	UserService_CreateUserAPIKey_FullMethodName                = "/user.UserService/CreateUserAPIKey"
	UserService_UpdateUserAPIKey_FullMethodName                = "/user.UserService/UpdateUserAPIKey"
	UserService_DeleteUserAPIKey_FullMethodName                = "/user.UserService/DeleteUserAPIKey"
	UserService_UserProfile_FullMethodName                     = "/user.UserService/UserProfile"
	UserService_UserByPublicId_FullMethodName                  = "/user.UserService/UserByPublicId"
	UserService_UserTickets_FullMethodName                     = "/user.UserService/UserTickets"
	UserService_UserTicket_FullMethodName                      = "/user.UserService/UserTicket"
	UserService_CreateTicket_FullMethodName                    = "/user.UserService/CreateTicket"
	UserService_AnswerTicket_FullMethodName                    = "/user.UserService/AnswerTicket"
	UserService_CreatePair_FullMethodName                      = "/user.UserService/CreatePair"
	UserService_UpdatePair_FullMethodName                      = "/user.UserService/UpdatePair"
	UserService_DeletePair_FullMethodName                      = "/user.UserService/DeletePair"
	UserService_Pairs_FullMethodName                           = "/user.UserService/Pairs"
	UserService_Pair_FullMethodName                            = "/user.UserService/Pair"
	UserService_Currencies_FullMethodName                      = "/user.UserService/Currencies"
	UserService_UpdateUserTelegramId_FullMethodName            = "/user.UserService/UpdateUserTelegramId"
	UserService_CloseTicket_FullMethodName                     = "/user.UserService/CloseTicket"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	PrepareAuthenticationWithGoogle(ctx context.Context, in *PrepareAuthenticationWithGoogleRequest, opts ...grpc.CallOption) (*PrepareAuthenticationWithGoogleResponse, error)
	VerifyAuthenticationWithGoogle(ctx context.Context, in *VerifyAuthenticationWithGoogleRequest, opts ...grpc.CallOption) (*VerifyAuthenticationWithGoogleResponse, error)
	CheckRequestAccess(ctx context.Context, in *CheckRequestAccessRequest, opts ...grpc.CallOption) (*CheckRequestAccessResponse, error)
	LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserResponse, error)
	Users(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	UserAPIKey(ctx context.Context, in *UserAPIKeyRequest, opts ...grpc.CallOption) (*UserAPIKeyResponse, error)
	UserAPIKeys(ctx context.Context, in *UserAPIKeysRequest, opts ...grpc.CallOption) (*UserAPIKeysResponse, error)
	CreateUserAPIKey(ctx context.Context, in *CreateUserAPIKeyRequest, opts ...grpc.CallOption) (*CreateUserAPIKeyResponse, error)
	UpdateUserAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*UpdateUserAPIKeyResponse, error)
	DeleteUserAPIKey(ctx context.Context, in *DeleteUserAPIKeyRequest, opts ...grpc.CallOption) (*DeleteUserAPIKeyResponse, error)
	UserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	UserByPublicId(ctx context.Context, in *UserByPublicIdRequest, opts ...grpc.CallOption) (*UserByPublicIdResponse, error)
	UserTickets(ctx context.Context, in *UserTicketsRequest, opts ...grpc.CallOption) (*UserTicketsResponse, error)
	UserTicket(ctx context.Context, in *UserTicketRequest, opts ...grpc.CallOption) (*UserTicketResponse, error)
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	AnswerTicket(ctx context.Context, in *AnswerTicketRequest, opts ...grpc.CallOption) (*AnswerTicketResponse, error)
	CreatePair(ctx context.Context, in *CreatePairRequest, opts ...grpc.CallOption) (*CreatePairResponse, error)
	UpdatePair(ctx context.Context, in *UpdatePairRequest, opts ...grpc.CallOption) (*UpdatePairResponse, error)
	DeletePair(ctx context.Context, in *DeletePairRequest, opts ...grpc.CallOption) (*DeletePairResponse, error)
	Pairs(ctx context.Context, in *PairsRequest, opts ...grpc.CallOption) (*PairsResponse, error)
	Pair(ctx context.Context, in *PairRequest, opts ...grpc.CallOption) (*PairResponse, error)
	Currencies(ctx context.Context, in *CurrenciesRequest, opts ...grpc.CallOption) (*CurrenciesResponse, error)
	UpdateUserTelegramId(ctx context.Context, in *UpdateUserTelegramIdRequest, opts ...grpc.CallOption) (*UpdateUserTelegramIdResponse, error)
	CloseTicket(ctx context.Context, in *CloseTicketRequest, opts ...grpc.CallOption) (*CloseTicketResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) PrepareAuthenticationWithGoogle(ctx context.Context, in *PrepareAuthenticationWithGoogleRequest, opts ...grpc.CallOption) (*PrepareAuthenticationWithGoogleResponse, error) {
	out := new(PrepareAuthenticationWithGoogleResponse)
	err := c.cc.Invoke(ctx, UserService_PrepareAuthenticationWithGoogle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerifyAuthenticationWithGoogle(ctx context.Context, in *VerifyAuthenticationWithGoogleRequest, opts ...grpc.CallOption) (*VerifyAuthenticationWithGoogleResponse, error) {
	out := new(VerifyAuthenticationWithGoogleResponse)
	err := c.cc.Invoke(ctx, UserService_VerifyAuthenticationWithGoogle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckRequestAccess(ctx context.Context, in *CheckRequestAccessRequest, opts ...grpc.CallOption) (*CheckRequestAccessResponse, error) {
	out := new(CheckRequestAccessResponse)
	err := c.cc.Invoke(ctx, UserService_CheckRequestAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LogoutUser(ctx context.Context, in *LogoutUserRequest, opts ...grpc.CallOption) (*LogoutUserResponse, error) {
	out := new(LogoutUserResponse)
	err := c.cc.Invoke(ctx, UserService_LogoutUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Users(ctx context.Context, in *UsersRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := c.cc.Invoke(ctx, UserService_Users_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAPIKey(ctx context.Context, in *UserAPIKeyRequest, opts ...grpc.CallOption) (*UserAPIKeyResponse, error) {
	out := new(UserAPIKeyResponse)
	err := c.cc.Invoke(ctx, UserService_UserAPIKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAPIKeys(ctx context.Context, in *UserAPIKeysRequest, opts ...grpc.CallOption) (*UserAPIKeysResponse, error) {
	out := new(UserAPIKeysResponse)
	err := c.cc.Invoke(ctx, UserService_UserAPIKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserAPIKey(ctx context.Context, in *CreateUserAPIKeyRequest, opts ...grpc.CallOption) (*CreateUserAPIKeyResponse, error) {
	out := new(CreateUserAPIKeyResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUserAPIKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserAPIKey(ctx context.Context, in *UpdateUserAPIKeyRequest, opts ...grpc.CallOption) (*UpdateUserAPIKeyResponse, error) {
	out := new(UpdateUserAPIKeyResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserAPIKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserAPIKey(ctx context.Context, in *DeleteUserAPIKeyRequest, opts ...grpc.CallOption) (*DeleteUserAPIKeyResponse, error) {
	out := new(DeleteUserAPIKeyResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUserAPIKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UserProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserByPublicId(ctx context.Context, in *UserByPublicIdRequest, opts ...grpc.CallOption) (*UserByPublicIdResponse, error) {
	out := new(UserByPublicIdResponse)
	err := c.cc.Invoke(ctx, UserService_UserByPublicId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserTickets(ctx context.Context, in *UserTicketsRequest, opts ...grpc.CallOption) (*UserTicketsResponse, error) {
	out := new(UserTicketsResponse)
	err := c.cc.Invoke(ctx, UserService_UserTickets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserTicket(ctx context.Context, in *UserTicketRequest, opts ...grpc.CallOption) (*UserTicketResponse, error) {
	out := new(UserTicketResponse)
	err := c.cc.Invoke(ctx, UserService_UserTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, UserService_CreateTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AnswerTicket(ctx context.Context, in *AnswerTicketRequest, opts ...grpc.CallOption) (*AnswerTicketResponse, error) {
	out := new(AnswerTicketResponse)
	err := c.cc.Invoke(ctx, UserService_AnswerTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatePair(ctx context.Context, in *CreatePairRequest, opts ...grpc.CallOption) (*CreatePairResponse, error) {
	out := new(CreatePairResponse)
	err := c.cc.Invoke(ctx, UserService_CreatePair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePair(ctx context.Context, in *UpdatePairRequest, opts ...grpc.CallOption) (*UpdatePairResponse, error) {
	out := new(UpdatePairResponse)
	err := c.cc.Invoke(ctx, UserService_UpdatePair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeletePair(ctx context.Context, in *DeletePairRequest, opts ...grpc.CallOption) (*DeletePairResponse, error) {
	out := new(DeletePairResponse)
	err := c.cc.Invoke(ctx, UserService_DeletePair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Pairs(ctx context.Context, in *PairsRequest, opts ...grpc.CallOption) (*PairsResponse, error) {
	out := new(PairsResponse)
	err := c.cc.Invoke(ctx, UserService_Pairs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Pair(ctx context.Context, in *PairRequest, opts ...grpc.CallOption) (*PairResponse, error) {
	out := new(PairResponse)
	err := c.cc.Invoke(ctx, UserService_Pair_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Currencies(ctx context.Context, in *CurrenciesRequest, opts ...grpc.CallOption) (*CurrenciesResponse, error) {
	out := new(CurrenciesResponse)
	err := c.cc.Invoke(ctx, UserService_Currencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserTelegramId(ctx context.Context, in *UpdateUserTelegramIdRequest, opts ...grpc.CallOption) (*UpdateUserTelegramIdResponse, error) {
	out := new(UpdateUserTelegramIdResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserTelegramId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CloseTicket(ctx context.Context, in *CloseTicketRequest, opts ...grpc.CallOption) (*CloseTicketResponse, error) {
	out := new(CloseTicketResponse)
	err := c.cc.Invoke(ctx, UserService_CloseTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	PrepareAuthenticationWithGoogle(context.Context, *PrepareAuthenticationWithGoogleRequest) (*PrepareAuthenticationWithGoogleResponse, error)
	VerifyAuthenticationWithGoogle(context.Context, *VerifyAuthenticationWithGoogleRequest) (*VerifyAuthenticationWithGoogleResponse, error)
	CheckRequestAccess(context.Context, *CheckRequestAccessRequest) (*CheckRequestAccessResponse, error)
	LogoutUser(context.Context, *LogoutUserRequest) (*LogoutUserResponse, error)
	Users(context.Context, *UsersRequest) (*UsersResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	UserAPIKey(context.Context, *UserAPIKeyRequest) (*UserAPIKeyResponse, error)
	UserAPIKeys(context.Context, *UserAPIKeysRequest) (*UserAPIKeysResponse, error)
	CreateUserAPIKey(context.Context, *CreateUserAPIKeyRequest) (*CreateUserAPIKeyResponse, error)
	UpdateUserAPIKey(context.Context, *UpdateUserAPIKeyRequest) (*UpdateUserAPIKeyResponse, error)
	DeleteUserAPIKey(context.Context, *DeleteUserAPIKeyRequest) (*DeleteUserAPIKeyResponse, error)
	UserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error)
	UserByPublicId(context.Context, *UserByPublicIdRequest) (*UserByPublicIdResponse, error)
	UserTickets(context.Context, *UserTicketsRequest) (*UserTicketsResponse, error)
	UserTicket(context.Context, *UserTicketRequest) (*UserTicketResponse, error)
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	AnswerTicket(context.Context, *AnswerTicketRequest) (*AnswerTicketResponse, error)
	CreatePair(context.Context, *CreatePairRequest) (*CreatePairResponse, error)
	UpdatePair(context.Context, *UpdatePairRequest) (*UpdatePairResponse, error)
	DeletePair(context.Context, *DeletePairRequest) (*DeletePairResponse, error)
	Pairs(context.Context, *PairsRequest) (*PairsResponse, error)
	Pair(context.Context, *PairRequest) (*PairResponse, error)
	Currencies(context.Context, *CurrenciesRequest) (*CurrenciesResponse, error)
	UpdateUserTelegramId(context.Context, *UpdateUserTelegramIdRequest) (*UpdateUserTelegramIdResponse, error)
	CloseTicket(context.Context, *CloseTicketRequest) (*CloseTicketResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) PrepareAuthenticationWithGoogle(context.Context, *PrepareAuthenticationWithGoogleRequest) (*PrepareAuthenticationWithGoogleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareAuthenticationWithGoogle not implemented")
}
func (UnimplementedUserServiceServer) VerifyAuthenticationWithGoogle(context.Context, *VerifyAuthenticationWithGoogleRequest) (*VerifyAuthenticationWithGoogleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAuthenticationWithGoogle not implemented")
}
func (UnimplementedUserServiceServer) CheckRequestAccess(context.Context, *CheckRequestAccessRequest) (*CheckRequestAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRequestAccess not implemented")
}
func (UnimplementedUserServiceServer) LogoutUser(context.Context, *LogoutUserRequest) (*LogoutUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedUserServiceServer) Users(context.Context, *UsersRequest) (*UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Users not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServiceServer) UserAPIKey(context.Context, *UserAPIKeyRequest) (*UserAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAPIKey not implemented")
}
func (UnimplementedUserServiceServer) UserAPIKeys(context.Context, *UserAPIKeysRequest) (*UserAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAPIKeys not implemented")
}
func (UnimplementedUserServiceServer) CreateUserAPIKey(context.Context, *CreateUserAPIKeyRequest) (*CreateUserAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAPIKey not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserAPIKey(context.Context, *UpdateUserAPIKeyRequest) (*UpdateUserAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAPIKey not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserAPIKey(context.Context, *DeleteUserAPIKeyRequest) (*DeleteUserAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAPIKey not implemented")
}
func (UnimplementedUserServiceServer) UserProfile(context.Context, *UserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfile not implemented")
}
func (UnimplementedUserServiceServer) UserByPublicId(context.Context, *UserByPublicIdRequest) (*UserByPublicIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserByPublicId not implemented")
}
func (UnimplementedUserServiceServer) UserTickets(context.Context, *UserTicketsRequest) (*UserTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserTickets not implemented")
}
func (UnimplementedUserServiceServer) UserTicket(context.Context, *UserTicketRequest) (*UserTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserTicket not implemented")
}
func (UnimplementedUserServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedUserServiceServer) AnswerTicket(context.Context, *AnswerTicketRequest) (*AnswerTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerTicket not implemented")
}
func (UnimplementedUserServiceServer) CreatePair(context.Context, *CreatePairRequest) (*CreatePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePair not implemented")
}
func (UnimplementedUserServiceServer) UpdatePair(context.Context, *UpdatePairRequest) (*UpdatePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePair not implemented")
}
func (UnimplementedUserServiceServer) DeletePair(context.Context, *DeletePairRequest) (*DeletePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePair not implemented")
}
func (UnimplementedUserServiceServer) Pairs(context.Context, *PairsRequest) (*PairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pairs not implemented")
}
func (UnimplementedUserServiceServer) Pair(context.Context, *PairRequest) (*PairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pair not implemented")
}
func (UnimplementedUserServiceServer) Currencies(context.Context, *CurrenciesRequest) (*CurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Currencies not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserTelegramId(context.Context, *UpdateUserTelegramIdRequest) (*UpdateUserTelegramIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTelegramId not implemented")
}
func (UnimplementedUserServiceServer) CloseTicket(context.Context, *CloseTicketRequest) (*CloseTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTicket not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_PrepareAuthenticationWithGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareAuthenticationWithGoogleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PrepareAuthenticationWithGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_PrepareAuthenticationWithGoogle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PrepareAuthenticationWithGoogle(ctx, req.(*PrepareAuthenticationWithGoogleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerifyAuthenticationWithGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAuthenticationWithGoogleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerifyAuthenticationWithGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerifyAuthenticationWithGoogle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerifyAuthenticationWithGoogle(ctx, req.(*VerifyAuthenticationWithGoogleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckRequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequestAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckRequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckRequestAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckRequestAccess(ctx, req.(*CheckRequestAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LogoutUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LogoutUser(ctx, req.(*LogoutUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Users_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Users(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Users_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Users(ctx, req.(*UsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAPIKey(ctx, req.(*UserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAPIKeys(ctx, req.(*UserAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUserAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUserAPIKey(ctx, req.(*CreateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserAPIKey(ctx, req.(*UpdateUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUserAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUserAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUserAPIKey(ctx, req.(*DeleteUserAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserByPublicId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserByPublicIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserByPublicId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserByPublicId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserByPublicId(ctx, req.(*UserByPublicIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserTickets(ctx, req.(*UserTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserTicket(ctx, req.(*UserTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AnswerTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AnswerTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AnswerTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AnswerTicket(ctx, req.(*AnswerTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatePair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatePair(ctx, req.(*CreatePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePair(ctx, req.(*UpdatePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeletePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeletePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeletePair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeletePair(ctx, req.(*DeletePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Pairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Pairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Pairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Pairs(ctx, req.(*PairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Pair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Pair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Pair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Pair(ctx, req.(*PairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Currencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Currencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Currencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Currencies(ctx, req.(*CurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserTelegramId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTelegramIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserTelegramId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserTelegramId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserTelegramId(ctx, req.(*UpdateUserTelegramIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CloseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CloseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CloseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CloseTicket(ctx, req.(*CloseTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareAuthenticationWithGoogle",
			Handler:    _UserService_PrepareAuthenticationWithGoogle_Handler,
		},
		{
			MethodName: "VerifyAuthenticationWithGoogle",
			Handler:    _UserService_VerifyAuthenticationWithGoogle_Handler,
		},
		{
			MethodName: "CheckRequestAccess",
			Handler:    _UserService_CheckRequestAccess_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _UserService_LogoutUser_Handler,
		},
		{
			MethodName: "Users",
			Handler:    _UserService_Users_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UserAPIKey",
			Handler:    _UserService_UserAPIKey_Handler,
		},
		{
			MethodName: "UserAPIKeys",
			Handler:    _UserService_UserAPIKeys_Handler,
		},
		{
			MethodName: "CreateUserAPIKey",
			Handler:    _UserService_CreateUserAPIKey_Handler,
		},
		{
			MethodName: "UpdateUserAPIKey",
			Handler:    _UserService_UpdateUserAPIKey_Handler,
		},
		{
			MethodName: "DeleteUserAPIKey",
			Handler:    _UserService_DeleteUserAPIKey_Handler,
		},
		{
			MethodName: "UserProfile",
			Handler:    _UserService_UserProfile_Handler,
		},
		{
			MethodName: "UserByPublicId",
			Handler:    _UserService_UserByPublicId_Handler,
		},
		{
			MethodName: "UserTickets",
			Handler:    _UserService_UserTickets_Handler,
		},
		{
			MethodName: "UserTicket",
			Handler:    _UserService_UserTicket_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _UserService_CreateTicket_Handler,
		},
		{
			MethodName: "AnswerTicket",
			Handler:    _UserService_AnswerTicket_Handler,
		},
		{
			MethodName: "CreatePair",
			Handler:    _UserService_CreatePair_Handler,
		},
		{
			MethodName: "UpdatePair",
			Handler:    _UserService_UpdatePair_Handler,
		},
		{
			MethodName: "DeletePair",
			Handler:    _UserService_DeletePair_Handler,
		},
		{
			MethodName: "Pairs",
			Handler:    _UserService_Pairs_Handler,
		},
		{
			MethodName: "Pair",
			Handler:    _UserService_Pair_Handler,
		},
		{
			MethodName: "Currencies",
			Handler:    _UserService_Currencies_Handler,
		},
		{
			MethodName: "UpdateUserTelegramId",
			Handler:    _UserService_UpdateUserTelegramId_Handler,
		},
		{
			MethodName: "CloseTicket",
			Handler:    _UserService_CloseTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allprotos/user.proto",
}
